parameter (or (or (or (or (pair %addLiquidity (nat %tokens) (nat %mutez)) (unit %claimRewards)) (or (unit %default) (pair %removeLiquidity (pair (nat %min_mutez_out) (nat %min_tokens_out)) (nat %lp_to_remove)))) (or (or (pair %rescueFA12 (address %tokenContractAddress) (pair (nat %amount) (address %destination))) (pair %rescueFA2 (address %tokenContractAddress) (pair (nat %tokenId) (pair (nat %amount) (address %destination))))) (or (pair %send mutez address) (or (address %sendAll) (address %sendAllTokens))))) (or (or (or (nat %sendAllTokens_callback) (pair %sendTokens nat address)) (or (option %setDelegate key_hash) (or (address %setExecutorContract) (address %setGovernorContract)))) (or (or (address %setHarbingerContract) (nat %setMaxDataDelaySec)) (or (nat %setSlippageTolerance) (or (pair %veto (nat %value) (address %voter)) (pair %vote (pair (key_hash %candidate) (nat %value)) (address %voter)))))));
storage   (pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == addLiquidity == # @parameter%addLiquidity : @storage
                    AMOUNT;     # @amount : @parameter%addLiquidity : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%addLiquidity : @storage
                    COMPARE;    # int : @parameter%addLiquidity : @storage
                    EQ;         # bool : @parameter%addLiquidity : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLiquidity : @storage
                    SWAP;       # @storage : @parameter%addLiquidity
                    # sp.verify(sp.sender == self.data.executorContractAddress, 2) # @storage : @parameter%addLiquidity
                    DUP;        # @storage : @storage : @parameter%addLiquidity
                    DUG 2;      # @storage : @parameter%addLiquidity : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%addLiquidity : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%addLiquidity : @storage
                    CAR;        # address : @parameter%addLiquidity : @storage
                    SENDER;     # @sender : address : @parameter%addLiquidity : @storage
                    COMPARE;    # int : @parameter%addLiquidity : @storage
                    EQ;         # bool : @parameter%addLiquidity : @storage
                    IF
                      {}
                      {
                        PUSH int 2; # int : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLiquidity : @storage
                    SWAP;       # @storage : @parameter%addLiquidity
                    # sp.verify(self.data.slippageTolerance > (((abs(sp.snd(sp.view("getPrice", 'XTZ-USD', self.data.harbingerContractAddress, sp.TPair(sp.TTimestamp, sp.TNat)).open_some(message = 11)) - ((params.tokens // params.mutez) // 1000000))) * 100) // sp.snd(sp.view("getPrice", 'XTZ-USD', self.data.harbingerContractAddress, sp.TPair(sp.TTimestamp, sp.TNat)).open_some(message = 11))), 8) # @storage : @parameter%addLiquidity
                    DUP;        # @storage : @storage : @parameter%addLiquidity
                    DUG 2;      # @storage : @parameter%addLiquidity : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%addLiquidity : @storage
                    GET 3;      # address : @parameter%addLiquidity : @storage
                    PUSH string "XTZ-USD"; # string : address : @parameter%addLiquidity : @storage
                    VIEW "getPrice" (pair timestamp nat); # option (pair timestamp nat) : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        PUSH int 11; # int : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%addLiquidity : @storage
                    CDR;        # nat : @parameter%addLiquidity : @storage
                    PUSH nat 100; # nat : nat : @parameter%addLiquidity : @storage
                    PUSH nat 1000000; # nat : nat : nat : @parameter%addLiquidity : @storage
                    DIG 3;      # @parameter%addLiquidity : nat : nat : nat : @storage
                    DUP;        # @parameter%addLiquidity : @parameter%addLiquidity : nat : nat : nat : @storage
                    CDR;        # nat : @parameter%addLiquidity : nat : nat : nat : @storage
                    SWAP;       # @parameter%addLiquidity : nat : nat : nat : nat : @storage
                    DUP;        # @parameter%addLiquidity : @parameter%addLiquidity : nat : nat : nat : nat : @storage
                    DUG 5;      # @parameter%addLiquidity : nat : nat : nat : nat : @parameter%addLiquidity : @storage
                    CAR;        # nat : nat : nat : nat : nat : @parameter%addLiquidity : @storage
                    EDIV;       # option (pair nat nat) : nat : nat : nat : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : nat : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : nat : @parameter%addLiquidity : @storage
                      }; # nat : nat : nat : nat : @parameter%addLiquidity : @storage
                    EDIV;       # option (pair nat nat) : nat : nat : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : nat : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : @parameter%addLiquidity : @storage
                      }; # nat : nat : nat : @parameter%addLiquidity : @storage
                    DUP 5;      # @storage : nat : nat : nat : @parameter%addLiquidity : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : nat : nat : nat : @parameter%addLiquidity : @storage
                    GET 3;      # address : nat : nat : nat : @parameter%addLiquidity : @storage
                    PUSH string "XTZ-USD"; # string : address : nat : nat : nat : @parameter%addLiquidity : @storage
                    VIEW "getPrice" (pair timestamp nat); # option (pair timestamp nat) : nat : nat : nat : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        PUSH int 11; # int : nat : nat : nat : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : @parameter%addLiquidity : @storage
                    CDR;        # nat : nat : nat : nat : @parameter%addLiquidity : @storage
                    SUB;        # int : nat : nat : @parameter%addLiquidity : @storage
                    ABS;        # nat : nat : nat : @parameter%addLiquidity : @storage
                    MUL;        # nat : nat : @parameter%addLiquidity : @storage
                    EDIV;       # option (pair nat nat) : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : @parameter%addLiquidity : @storage
                      }; # nat : @parameter%addLiquidity : @storage
                    DUP 3;      # @storage : nat : @parameter%addLiquidity : @storage
                    GET 5;      # nat : nat : @parameter%addLiquidity : @storage
                    COMPARE;    # int : @parameter%addLiquidity : @storage
                    GT;         # bool : @parameter%addLiquidity : @storage
                    IF
                      {}
                      {
                        PUSH int 8; # int : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLiquidity : @storage
                    SWAP;       # @storage : @parameter%addLiquidity
                    # sp.verify(sp.as_nat(sp.now - sp.fst(sp.view("getPrice", 'XTZ-USD', self.data.harbingerContractAddress, sp.TPair(sp.TTimestamp, sp.TNat)).open_some(message = 11))) <= self.data.maxDataDelaySec, 4) # @storage : @parameter%addLiquidity
                    DUP;        # @storage : @storage : @parameter%addLiquidity
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @storage : @parameter%addLiquidity
                    GET 4;      # nat : @storage : @parameter%addLiquidity
                    SWAP;       # @storage : nat : @parameter%addLiquidity
                    DUP;        # @storage : @storage : nat : @parameter%addLiquidity
                    DUG 3;      # @storage : nat : @parameter%addLiquidity : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : nat : @parameter%addLiquidity : @storage
                    GET 3;      # address : nat : @parameter%addLiquidity : @storage
                    PUSH string "XTZ-USD"; # string : address : nat : @parameter%addLiquidity : @storage
                    VIEW "getPrice" (pair timestamp nat); # option (pair timestamp nat) : nat : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        PUSH int 11; # int : nat : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%addLiquidity : @storage
                    CAR;        # timestamp : nat : @parameter%addLiquidity : @storage
                    NOW;        # @now : timestamp : nat : @parameter%addLiquidity : @storage
                    SUB;        # int : nat : @parameter%addLiquidity : @storage
                    ISNAT;      # option nat : nat : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : nat : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%addLiquidity : @storage
                    COMPARE;    # int : @parameter%addLiquidity : @storage
                    LE;         # bool : @parameter%addLiquidity : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%addLiquidity : @storage
                    # sp.transfer((self.data.quipuswapContractAddress, params.tokens), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TNat), self.data.tokenContractAddress, entry_point='approve').open_some(message = 15)) # @parameter%addLiquidity : @storage
                    NIL operation; # list operation : @parameter%addLiquidity : @storage
                    DUP 3;      # @storage : list operation : @parameter%addLiquidity : @storage
                    GET 8;      # address : list operation : @parameter%addLiquidity : @storage
                    CONTRACT %approve (pair address nat); # option (contract (pair address nat)) : list operation : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        PUSH int 15; # int : list operation : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%addLiquidity : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%addLiquidity : @storage
                    DUP 4;      # @parameter%addLiquidity : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    CAR;        # nat : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    DUP 6;      # @storage : nat : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : nat : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    CAR;        # address : nat : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    PAIR;       # pair address nat : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%addLiquidity : @storage
                    CONS;       # list operation : @parameter%addLiquidity : @storage
                    # sp.transfer(params.tokens, sp.mul(sp.set_type_expr(params.mutez, sp.TNat), sp.mutez(1)), sp.contract(sp.TNat, self.data.quipuswapContractAddress, entry_point='investLiquidity').open_some(message = 13)) # list operation : @parameter%addLiquidity : @storage
                    DUP 3;      # @storage : list operation : @parameter%addLiquidity : @storage
                    GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : list operation : @parameter%addLiquidity : @storage
                    CAR;        # address : list operation : @parameter%addLiquidity : @storage
                    CONTRACT %investLiquidity nat; # option (contract nat) : list operation : @parameter%addLiquidity : @storage
                    IF_NONE
                      {
                        PUSH int 13; # int : list operation : @parameter%addLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%addLiquidity : @storage
                    PUSH mutez 1; # mutez : @some : list operation : @parameter%addLiquidity : @storage
                    DUP 4;      # @parameter%addLiquidity : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    CDR;        # nat : mutez : @some : list operation : @parameter%addLiquidity : @storage
                    MUL;        # mutez : @some : list operation : @parameter%addLiquidity : @storage
                    DIG 3;      # @parameter%addLiquidity : mutez : @some : list operation : @storage
                    CAR;        # nat : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    DROP;       # @storage
                    # == claimRewards == # @storage
                    AMOUNT;     # @amount : @storage
                    PUSH mutez 0; # mutez : @amount : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @storage
                    CDR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.transfer(sp.self_address, sp.tez(0), sp.contract(sp.TAddress, self.data.quipuswapContractAddress, entry_point='withdrawProfit').open_some(message = 13)) # @storage
                    DUP;        # @storage : @storage
                    GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : @storage
                    CAR;        # address : @storage
                    CONTRACT %withdrawProfit address; # option (contract address) : @storage
                    IF_NONE
                      {
                        PUSH int 13; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    NIL operation; # list operation : @some : @storage
                    SWAP;       # @some : list operation : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == default == # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    # == removeLiquidity == # @parameter%removeLiquidity : @storage
                    AMOUNT;     # @amount : @parameter%removeLiquidity : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%removeLiquidity : @storage
                    COMPARE;    # int : @parameter%removeLiquidity : @storage
                    EQ;         # bool : @parameter%removeLiquidity : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%removeLiquidity : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeLiquidity : @storage
                    SWAP;       # @storage : @parameter%removeLiquidity
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%removeLiquidity
                    DUP;        # @storage : @storage : @parameter%removeLiquidity
                    DUG 2;      # @storage : @parameter%removeLiquidity : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%removeLiquidity : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%removeLiquidity : @storage
                    CDR;        # address : @parameter%removeLiquidity : @storage
                    SENDER;     # @sender : address : @parameter%removeLiquidity : @storage
                    COMPARE;    # int : @parameter%removeLiquidity : @storage
                    EQ;         # bool : @parameter%removeLiquidity : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%removeLiquidity : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%removeLiquidity : @storage
                    # sp.transfer(((params.min_mutez_out, params.min_tokens_out), params.lp_to_remove), sp.tez(0), sp.contract(sp.TPair(sp.TPair(sp.TNat, sp.TNat), sp.TNat), self.data.quipuswapContractAddress, entry_point='divestLiquidity').open_some(message = 13)) # @parameter%removeLiquidity : @storage
                    NIL operation; # list operation : @parameter%removeLiquidity : @storage
                    DUP 3;      # @storage : list operation : @parameter%removeLiquidity : @storage
                    GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : list operation : @parameter%removeLiquidity : @storage
                    CAR;        # address : list operation : @parameter%removeLiquidity : @storage
                    CONTRACT %divestLiquidity (pair (pair nat nat) nat); # option (contract (pair (pair nat nat) nat)) : list operation : @parameter%removeLiquidity : @storage
                    IF_NONE
                      {
                        PUSH int 13; # int : list operation : @parameter%removeLiquidity : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%removeLiquidity : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%removeLiquidity : @storage
                    DIG 3;      # @parameter%removeLiquidity : mutez : @some : list operation : @storage
                    DUP;        # @parameter%removeLiquidity : @parameter%removeLiquidity : mutez : @some : list operation : @storage
                    CDR;        # nat : @parameter%removeLiquidity : mutez : @some : list operation : @storage
                    SWAP;       # @parameter%removeLiquidity : nat : mutez : @some : list operation : @storage
                    DUP;        # @parameter%removeLiquidity : @parameter%removeLiquidity : nat : mutez : @some : list operation : @storage
                    CAR;        # pair (nat %min_mutez_out) (nat %min_tokens_out) : @parameter%removeLiquidity : nat : mutez : @some : list operation : @storage
                    CDR;        # nat : @parameter%removeLiquidity : nat : mutez : @some : list operation : @storage
                    SWAP;       # @parameter%removeLiquidity : nat : nat : mutez : @some : list operation : @storage
                    CAR;        # pair (nat %min_mutez_out) (nat %min_tokens_out) : nat : nat : mutez : @some : list operation : @storage
                    CAR;        # nat : nat : nat : mutez : @some : list operation : @storage
                    PAIR;       # pair nat nat : nat : mutez : @some : list operation : @storage
                    PAIR;       # pair (pair nat nat) nat : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == rescueFA12 == # @parameter%rescueFA12 : @storage
                    AMOUNT;     # @amount : @parameter%rescueFA12 : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%rescueFA12 : @storage
                    COMPARE;    # int : @parameter%rescueFA12 : @storage
                    EQ;         # bool : @parameter%rescueFA12 : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%rescueFA12 : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%rescueFA12 : @storage
                    SWAP;       # @storage : @parameter%rescueFA12
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%rescueFA12
                    DUP;        # @storage : @storage : @parameter%rescueFA12
                    DUG 2;      # @storage : @parameter%rescueFA12 : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%rescueFA12 : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%rescueFA12 : @storage
                    CDR;        # address : @parameter%rescueFA12 : @storage
                    SENDER;     # @sender : address : @parameter%rescueFA12 : @storage
                    COMPARE;    # int : @parameter%rescueFA12 : @storage
                    EQ;         # bool : @parameter%rescueFA12 : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%rescueFA12 : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%rescueFA12 : @storage
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = params.destination, value = params.amount), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), params.tokenContractAddress, entry_point='transfer').open_some(message = 17)) # @parameter%rescueFA12 : @storage
                    DUP;        # @parameter%rescueFA12 : @parameter%rescueFA12 : @storage
                    CAR;        # address : @parameter%rescueFA12 : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : @parameter%rescueFA12 : @storage
                    IF_NONE
                      {
                        PUSH int 17; # int : @parameter%rescueFA12 : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%rescueFA12 : @storage
                    NIL operation; # list operation : @some : @parameter%rescueFA12 : @storage
                    SWAP;       # @some : list operation : @parameter%rescueFA12 : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%rescueFA12 : @storage
                    DIG 3;      # @parameter%rescueFA12 : mutez : @some : list operation : @storage
                    DUP;        # @parameter%rescueFA12 : @parameter%rescueFA12 : mutez : @some : list operation : @storage
                    GET 3;      # nat : @parameter%rescueFA12 : mutez : @some : list operation : @storage
                    SWAP;       # @parameter%rescueFA12 : nat : mutez : @some : list operation : @storage
                    GET 4;      # address : nat : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @storage
                    PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    # == rescueFA2 == # @parameter%rescueFA2 : @storage
                    AMOUNT;     # @amount : @parameter%rescueFA2 : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%rescueFA2 : @storage
                    COMPARE;    # int : @parameter%rescueFA2 : @storage
                    EQ;         # bool : @parameter%rescueFA2 : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%rescueFA2 : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%rescueFA2 : @storage
                    SWAP;       # @storage : @parameter%rescueFA2
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%rescueFA2
                    DUP;        # @storage : @storage : @parameter%rescueFA2
                    DUG 2;      # @storage : @parameter%rescueFA2 : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%rescueFA2 : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%rescueFA2 : @storage
                    CDR;        # address : @parameter%rescueFA2 : @storage
                    SENDER;     # @sender : address : @parameter%rescueFA2 : @storage
                    COMPARE;    # int : @parameter%rescueFA2 : @storage
                    EQ;         # bool : @parameter%rescueFA2 : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%rescueFA2 : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%rescueFA2 : @storage
                    # sp.transfer(sp.list([sp.record(from_ = sp.self_address, txs = sp.list([sp.record(to_ = params.destination, token_id = params.tokenId, amount = params.amount)]))]), sp.tez(0), sp.contract(sp.TList(sp.TRecord(from_ = sp.TAddress, txs = sp.TList(sp.TRecord(amount = sp.TNat, to_ = sp.TAddress, token_id = sp.TNat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), params.tokenContractAddress, entry_point='transfer').open_some(message = 17)) # @parameter%rescueFA2 : @storage
                    DUP;        # @parameter%rescueFA2 : @parameter%rescueFA2 : @storage
                    CAR;        # address : @parameter%rescueFA2 : @storage
                    CONTRACT %transfer (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))); # option (contract (list (pair (address %from_) (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount))))))) : @parameter%rescueFA2 : @storage
                    IF_NONE
                      {
                        PUSH int 17; # int : @parameter%rescueFA2 : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%rescueFA2 : @storage
                    NIL operation; # list operation : @some : @parameter%rescueFA2 : @storage
                    SWAP;       # @some : list operation : @parameter%rescueFA2 : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%rescueFA2 : @storage
                    NIL (pair address (list (pair address (pair nat nat)))); # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%rescueFA2 : @storage
                    NIL (pair address (pair nat nat)); # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @parameter%rescueFA2 : @storage
                    DIG 5;      # @parameter%rescueFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    DUP;        # @parameter%rescueFA2 : @parameter%rescueFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    GET 5;      # nat : @parameter%rescueFA2 : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    SWAP;       # @parameter%rescueFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    DUP;        # @parameter%rescueFA2 : @parameter%rescueFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    GET 3;      # nat : @parameter%rescueFA2 : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    SWAP;       # @parameter%rescueFA2 : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    GET 6;      # address : nat : nat : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    PAIR 3;     # pair address (pair nat nat) : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    CONS;       # list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : list (pair address (pair nat nat)) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    PAIR;       # pair @self (list (pair address (pair nat nat))) : list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    CONS;       # list (pair address (list (pair address (pair nat nat)))) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == send == # @parameter%send : @storage
                    AMOUNT;     # @amount : @parameter%send : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%send : @storage
                    COMPARE;    # int : @parameter%send : @storage
                    EQ;         # bool : @parameter%send : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%send : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%send : @storage
                    SWAP;       # @storage : @parameter%send
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%send
                    DUP;        # @storage : @storage : @parameter%send
                    DUG 2;      # @storage : @parameter%send : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%send : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%send : @storage
                    CDR;        # address : @parameter%send : @storage
                    SENDER;     # @sender : address : @parameter%send : @storage
                    COMPARE;    # int : @parameter%send : @storage
                    EQ;         # bool : @parameter%send : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%send : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%send : @storage
                    # sp.send(sp.snd(params), sp.fst(params)) # @parameter%send : @storage
                    DUP;        # @parameter%send : @parameter%send : @storage
                    CDR;        # address : @parameter%send : @storage
                    CONTRACT unit; # option (contract unit) : @parameter%send : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @parameter%send : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%send : @storage
                    NIL operation; # list operation : @some : @parameter%send : @storage
                    SWAP;       # @some : list operation : @parameter%send : @storage
                    DIG 2;      # @parameter%send : @some : list operation : @storage
                    CAR;        # mutez : @some : list operation : @storage
                    UNIT;       # unit : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # == sendAll == # @parameter%sendAll : @storage
                        AMOUNT;     # @amount : @parameter%sendAll : @storage
                        PUSH mutez 0; # mutez : @amount : @parameter%sendAll : @storage
                        COMPARE;    # int : @parameter%sendAll : @storage
                        EQ;         # bool : @parameter%sendAll : @storage
                        IF
                          {}
                          {
                            AMOUNT;     # @amount : @parameter%sendAll : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sendAll : @storage
                        SWAP;       # @storage : @parameter%sendAll
                        # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%sendAll
                        DUP;        # @storage : @storage : @parameter%sendAll
                        DUG 2;      # @storage : @parameter%sendAll : @storage
                        CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%sendAll : @storage
                        CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%sendAll : @storage
                        CDR;        # address : @parameter%sendAll : @storage
                        SENDER;     # @sender : address : @parameter%sendAll : @storage
                        COMPARE;    # int : @parameter%sendAll : @storage
                        EQ;         # bool : @parameter%sendAll : @storage
                        IF
                          {}
                          {
                            PUSH int 1; # int : @parameter%sendAll : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sendAll : @storage
                        # sp.send(params, sp.balance) # @parameter%sendAll : @storage
                        CONTRACT unit; # option (contract unit) : @storage
                        IF_NONE
                          {
                            UNIT;       # unit : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : @storage
                        NIL operation; # list operation : @some : @storage
                        SWAP;       # @some : list operation : @storage
                        BALANCE;    # @balance : @some : list operation : @storage
                        UNIT;       # unit : @balance : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        # == sendAllTokens == # @parameter%sendAllTokens : @storage
                        AMOUNT;     # @amount : @parameter%sendAllTokens : @storage
                        PUSH mutez 0; # mutez : @amount : @parameter%sendAllTokens : @storage
                        COMPARE;    # int : @parameter%sendAllTokens : @storage
                        EQ;         # bool : @parameter%sendAllTokens : @storage
                        IF
                          {}
                          {
                            AMOUNT;     # @amount : @parameter%sendAllTokens : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sendAllTokens : @storage
                        SWAP;       # @storage : @parameter%sendAllTokens
                        # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%sendAllTokens
                        DUP;        # @storage : @storage : @parameter%sendAllTokens
                        DUG 2;      # @storage : @parameter%sendAllTokens : @storage
                        CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%sendAllTokens : @storage
                        CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%sendAllTokens : @storage
                        CDR;        # address : @parameter%sendAllTokens : @storage
                        SENDER;     # @sender : address : @parameter%sendAllTokens : @storage
                        COMPARE;    # int : @parameter%sendAllTokens : @storage
                        EQ;         # bool : @parameter%sendAllTokens : @storage
                        IF
                          {}
                          {
                            PUSH int 1; # int : @parameter%sendAllTokens : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sendAllTokens : @storage
                        # sp.verify(self.data.state == 0, 14) # @parameter%sendAllTokens : @storage
                        PUSH int 0; # int : @parameter%sendAllTokens : @storage
                        DUP 3;      # @storage : int : @parameter%sendAllTokens : @storage
                        GET 7;      # int : int : @parameter%sendAllTokens : @storage
                        COMPARE;    # int : @parameter%sendAllTokens : @storage
                        EQ;         # bool : @parameter%sendAllTokens : @storage
                        IF
                          {}
                          {
                            PUSH int 14; # int : @parameter%sendAllTokens : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sendAllTokens : @storage
                        # sp.transfer((sp.self_address, sp.self_entry_point('sendAllTokens_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.tokenContractAddress, entry_point='getBalance').open_some(message = 18)) # @parameter%sendAllTokens : @storage
                        NIL operation; # list operation : @parameter%sendAllTokens : @storage
                        DUP 3;      # @storage : list operation : @parameter%sendAllTokens : @storage
                        GET 8;      # address : list operation : @parameter%sendAllTokens : @storage
                        CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : list operation : @parameter%sendAllTokens : @storage
                        IF_NONE
                          {
                            PUSH int 18; # int : list operation : @parameter%sendAllTokens : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%sendAllTokens : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%sendAllTokens : @storage
                        SELF %sendAllTokens_callback; # @self : mutez : @some : list operation : @parameter%sendAllTokens : @storage
                        SELF_ADDRESS; # @self : @self : mutez : @some : list operation : @parameter%sendAllTokens : @storage
                        PAIR;       # pair @self @self : mutez : @some : list operation : @parameter%sendAllTokens : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%sendAllTokens : @storage
                        CONS;       # list operation : @parameter%sendAllTokens : @storage
                        # self.data.state = 1 # list operation : @parameter%sendAllTokens : @storage
                        DIG 2;      # @storage : list operation : @parameter%sendAllTokens
                        PUSH int 1; # int : @storage : list operation : @parameter%sendAllTokens
                        UPDATE 7;   # @storage : list operation : @parameter%sendAllTokens
                        # self.data.sendAllTokens_destination = sp.some(params) # @storage : list operation : @parameter%sendAllTokens
                        UNPAIR;     # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : list operation : @parameter%sendAllTokens
                        SWAP;       # pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation : @parameter%sendAllTokens
                        UNPAIR;     # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation : @parameter%sendAllTokens
                        CAR;        # address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation : @parameter%sendAllTokens
                        DIG 4;      # @parameter%sendAllTokens : address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                        SOME;       # option address : address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                        SWAP;       # address : option address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                        PAIR;       # pair address (option address) : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                        PAIR;       # pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                        SWAP;       # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : list operation
                        PAIR;       # pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))) : list operation
                        SWAP;       # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                      }; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
          }; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == sendAllTokens_callback == # @parameter%sendAllTokens_callback : @storage
                    AMOUNT;     # @amount : @parameter%sendAllTokens_callback : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%sendAllTokens_callback : @storage
                    COMPARE;    # int : @parameter%sendAllTokens_callback : @storage
                    EQ;         # bool : @parameter%sendAllTokens_callback : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%sendAllTokens_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%sendAllTokens_callback : @storage
                    SWAP;       # @storage : @parameter%sendAllTokens_callback
                    # sp.verify(sp.sender == self.data.tokenContractAddress, 10) # @storage : @parameter%sendAllTokens_callback
                    DUP;        # @storage : @storage : @parameter%sendAllTokens_callback
                    DUG 2;      # @storage : @parameter%sendAllTokens_callback : @storage
                    GET 8;      # address : @parameter%sendAllTokens_callback : @storage
                    SENDER;     # @sender : address : @parameter%sendAllTokens_callback : @storage
                    COMPARE;    # int : @parameter%sendAllTokens_callback : @storage
                    EQ;         # bool : @parameter%sendAllTokens_callback : @storage
                    IF
                      {}
                      {
                        PUSH int 10; # int : @parameter%sendAllTokens_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%sendAllTokens_callback : @storage
                    # sp.verify(self.data.state == 1, 14) # @parameter%sendAllTokens_callback : @storage
                    PUSH int 1; # int : @parameter%sendAllTokens_callback : @storage
                    DUP 3;      # @storage : int : @parameter%sendAllTokens_callback : @storage
                    GET 7;      # int : int : @parameter%sendAllTokens_callback : @storage
                    COMPARE;    # int : @parameter%sendAllTokens_callback : @storage
                    EQ;         # bool : @parameter%sendAllTokens_callback : @storage
                    IF
                      {}
                      {
                        PUSH int 14; # int : @parameter%sendAllTokens_callback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%sendAllTokens_callback : @storage
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = self.data.sendAllTokens_destination.open_some(), value = params), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenContractAddress, entry_point='transfer').open_some(message = 17)) # @parameter%sendAllTokens_callback : @storage
                    NIL operation; # list operation : @parameter%sendAllTokens_callback : @storage
                    DUP 3;      # @storage : list operation : @parameter%sendAllTokens_callback : @storage
                    GET 8;      # address : list operation : @parameter%sendAllTokens_callback : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%sendAllTokens_callback : @storage
                    IF_NONE
                      {
                        PUSH int 17; # int : list operation : @parameter%sendAllTokens_callback : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%sendAllTokens_callback : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%sendAllTokens_callback : @storage
                    DIG 3;      # @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                    DUP 5;      # @storage : @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                    GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                    CDR;        # option address : @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                    IF_NONE
                      {
                        UNIT;       # unit : @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : @some : @parameter%sendAllTokens_callback : mutez : @some : list operation : @storage
                    PAIR 3;     # pair @self (pair @some @parameter%sendAllTokens_callback) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = 0 # @storage : list operation
                    PUSH int 0; # int : @storage : list operation
                    UPDATE 7;   # @storage : list operation
                    # self.data.sendAllTokens_destination = sp.none # @storage : list operation
                    UNPAIR;     # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : list operation
                    SWAP;       # pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    UNPAIR;     # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    CAR;        # address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    NONE address; # option address : address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    SWAP;       # address : option address : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    PAIR;       # pair address (option address) : pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    PAIR;       # pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : list operation
                    SWAP;       # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                  }
                  {
                    # == sendTokens == # @parameter%sendTokens : @storage
                    AMOUNT;     # @amount : @parameter%sendTokens : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%sendTokens : @storage
                    COMPARE;    # int : @parameter%sendTokens : @storage
                    EQ;         # bool : @parameter%sendTokens : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%sendTokens : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%sendTokens : @storage
                    SWAP;       # @storage : @parameter%sendTokens
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%sendTokens
                    DUP;        # @storage : @storage : @parameter%sendTokens
                    DUG 2;      # @storage : @parameter%sendTokens : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%sendTokens : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%sendTokens : @storage
                    CDR;        # address : @parameter%sendTokens : @storage
                    SENDER;     # @sender : address : @parameter%sendTokens : @storage
                    COMPARE;    # int : @parameter%sendTokens : @storage
                    EQ;         # bool : @parameter%sendTokens : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%sendTokens : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%sendTokens : @storage
                    # sp.transfer(sp.record(from_ = sp.self_address, to_ = sp.snd(params), value = sp.fst(params)), sp.tez(0), sp.contract(sp.TRecord(from_ = sp.TAddress, to_ = sp.TAddress, value = sp.TNat).layout(("from_ as from", ("to_ as to", "value"))), self.data.tokenContractAddress, entry_point='transfer').open_some(message = 17)) # @parameter%sendTokens : @storage
                    NIL operation; # list operation : @parameter%sendTokens : @storage
                    DUP 3;      # @storage : list operation : @parameter%sendTokens : @storage
                    GET 8;      # address : list operation : @parameter%sendTokens : @storage
                    CONTRACT %transfer (pair (address %from) (pair (address %to) (nat %value))); # option (contract (pair (address %from) (pair (address %to) (nat %value)))) : list operation : @parameter%sendTokens : @storage
                    IF_NONE
                      {
                        PUSH int 17; # int : list operation : @parameter%sendTokens : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @parameter%sendTokens : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%sendTokens : @storage
                    DIG 3;      # @parameter%sendTokens : mutez : @some : list operation : @storage
                    UNPAIR;     # nat : address : mutez : @some : list operation : @storage
                    SWAP;       # address : nat : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : address : nat : mutez : @some : list operation : @storage
                    PAIR 3;     # pair @self (pair address nat) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    # == setDelegate == # @parameter%setDelegate : @storage
                    AMOUNT;     # @amount : @parameter%setDelegate : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%setDelegate : @storage
                    COMPARE;    # int : @parameter%setDelegate : @storage
                    EQ;         # bool : @parameter%setDelegate : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%setDelegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setDelegate : @storage
                    SWAP;       # @storage : @parameter%setDelegate
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setDelegate
                    DUP;        # @storage : @storage : @parameter%setDelegate
                    DUG 2;      # @storage : @parameter%setDelegate : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%setDelegate : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%setDelegate : @storage
                    CDR;        # address : @parameter%setDelegate : @storage
                    SENDER;     # @sender : address : @parameter%setDelegate : @storage
                    COMPARE;    # int : @parameter%setDelegate : @storage
                    EQ;         # bool : @parameter%setDelegate : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setDelegate : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setDelegate : @storage
                    # sp.set_delegate(params) # @parameter%setDelegate : @storage
                    SET_DELEGATE; # operation : @storage
                    NIL operation; # list operation : operation : @storage
                    SWAP;       # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # == setExecutorContract == # @parameter%setExecutorContract : @storage
                        AMOUNT;     # @amount : @parameter%setExecutorContract : @storage
                        PUSH mutez 0; # mutez : @amount : @parameter%setExecutorContract : @storage
                        COMPARE;    # int : @parameter%setExecutorContract : @storage
                        EQ;         # bool : @parameter%setExecutorContract : @storage
                        IF
                          {}
                          {
                            AMOUNT;     # @amount : @parameter%setExecutorContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setExecutorContract : @storage
                        SWAP;       # @storage : @parameter%setExecutorContract
                        # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setExecutorContract
                        DUP;        # @storage : @storage : @parameter%setExecutorContract
                        DUG 2;      # @storage : @parameter%setExecutorContract : @storage
                        CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%setExecutorContract : @storage
                        CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%setExecutorContract : @storage
                        CDR;        # address : @parameter%setExecutorContract : @storage
                        SENDER;     # @sender : address : @parameter%setExecutorContract : @storage
                        COMPARE;    # int : @parameter%setExecutorContract : @storage
                        EQ;         # bool : @parameter%setExecutorContract : @storage
                        IF
                          {}
                          {
                            PUSH int 1; # int : @parameter%setExecutorContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setExecutorContract : @storage
                        SWAP;       # @storage : @parameter%setExecutorContract
                        # self.data.executorContractAddress = params # @storage : @parameter%setExecutorContract
                        UNPAIR;     # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setExecutorContract
                        UNPAIR;     # pair (address %executorContractAddress) (address %governorContractAddress) : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setExecutorContract
                        CDR;        # address : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setExecutorContract
                        DIG 3;      # @parameter%setExecutorContract : address : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        PAIR;       # pair @parameter%setExecutorContract address : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        PAIR;       # pair (pair @parameter%setExecutorContract address) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair @parameter%setExecutorContract address) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                      }
                      {
                        # == setGovernorContract == # @parameter%setGovernorContract : @storage
                        AMOUNT;     # @amount : @parameter%setGovernorContract : @storage
                        PUSH mutez 0; # mutez : @amount : @parameter%setGovernorContract : @storage
                        COMPARE;    # int : @parameter%setGovernorContract : @storage
                        EQ;         # bool : @parameter%setGovernorContract : @storage
                        IF
                          {}
                          {
                            AMOUNT;     # @amount : @parameter%setGovernorContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setGovernorContract : @storage
                        SWAP;       # @storage : @parameter%setGovernorContract
                        # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setGovernorContract
                        DUP;        # @storage : @storage : @parameter%setGovernorContract
                        DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                        CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%setGovernorContract : @storage
                        CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%setGovernorContract : @storage
                        CDR;        # address : @parameter%setGovernorContract : @storage
                        SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                        COMPARE;    # int : @parameter%setGovernorContract : @storage
                        EQ;         # bool : @parameter%setGovernorContract : @storage
                        IF
                          {}
                          {
                            PUSH int 1; # int : @parameter%setGovernorContract : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setGovernorContract : @storage
                        SWAP;       # @storage : @parameter%setGovernorContract
                        # self.data.governorContractAddress = params # @storage : @parameter%setGovernorContract
                        UNPAIR;     # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        UNPAIR;     # pair (address %executorContractAddress) (address %governorContractAddress) : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        CAR;        # address : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setGovernorContract
                        DIG 3;      # @parameter%setGovernorContract : address : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        SWAP;       # address : @parameter%setGovernorContract : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        PAIR;       # pair address @parameter%setGovernorContract : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        PAIR;       # pair (pair address @parameter%setGovernorContract) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                        PAIR;       # pair (pair (pair address @parameter%setGovernorContract) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                      }; # pair (pair (pair address address) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                    NIL operation; # list operation : pair (pair (pair address address) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                  }; # list operation : pair (pair (pair address address) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
              }; # list operation : pair (pair (pair address address) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec))) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == setHarbingerContract == # @parameter%setHarbingerContract : @storage
                    AMOUNT;     # @amount : @parameter%setHarbingerContract : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%setHarbingerContract : @storage
                    COMPARE;    # int : @parameter%setHarbingerContract : @storage
                    EQ;         # bool : @parameter%setHarbingerContract : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%setHarbingerContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setHarbingerContract : @storage
                    SWAP;       # @storage : @parameter%setHarbingerContract
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setHarbingerContract
                    DUP;        # @storage : @storage : @parameter%setHarbingerContract
                    DUG 2;      # @storage : @parameter%setHarbingerContract : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%setHarbingerContract : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%setHarbingerContract : @storage
                    CDR;        # address : @parameter%setHarbingerContract : @storage
                    SENDER;     # @sender : address : @parameter%setHarbingerContract : @storage
                    COMPARE;    # int : @parameter%setHarbingerContract : @storage
                    EQ;         # bool : @parameter%setHarbingerContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setHarbingerContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setHarbingerContract : @storage
                    SWAP;       # @storage : @parameter%setHarbingerContract
                    # self.data.harbingerContractAddress = params # @storage : @parameter%setHarbingerContract
                    UNPAIR;     # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setHarbingerContract
                    UNPAIR;     # pair (address %executorContractAddress) (address %governorContractAddress) : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setHarbingerContract
                    SWAP;       # pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setHarbingerContract
                    CDR;        # nat : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setHarbingerContract
                    DIG 3;      # @parameter%setHarbingerContract : nat : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    PAIR;       # pair @parameter%setHarbingerContract nat : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    SWAP;       # pair (address %executorContractAddress) (address %governorContractAddress) : pair @parameter%setHarbingerContract nat : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair @parameter%setHarbingerContract nat) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair @parameter%setHarbingerContract nat)) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                  }
                  {
                    # == setMaxDataDelaySec == # @parameter%setMaxDataDelaySec : @storage
                    AMOUNT;     # @amount : @parameter%setMaxDataDelaySec : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%setMaxDataDelaySec : @storage
                    COMPARE;    # int : @parameter%setMaxDataDelaySec : @storage
                    EQ;         # bool : @parameter%setMaxDataDelaySec : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%setMaxDataDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMaxDataDelaySec : @storage
                    SWAP;       # @storage : @parameter%setMaxDataDelaySec
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setMaxDataDelaySec
                    DUP;        # @storage : @storage : @parameter%setMaxDataDelaySec
                    DUG 2;      # @storage : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%setMaxDataDelaySec : @storage
                    CDR;        # address : @parameter%setMaxDataDelaySec : @storage
                    SENDER;     # @sender : address : @parameter%setMaxDataDelaySec : @storage
                    COMPARE;    # int : @parameter%setMaxDataDelaySec : @storage
                    EQ;         # bool : @parameter%setMaxDataDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setMaxDataDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMaxDataDelaySec : @storage
                    SWAP;       # @storage : @parameter%setMaxDataDelaySec
                    # self.data.maxDataDelaySec = params # @storage : @parameter%setMaxDataDelaySec
                    UNPAIR;     # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setMaxDataDelaySec
                    UNPAIR;     # pair (address %executorContractAddress) (address %governorContractAddress) : pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setMaxDataDelaySec
                    SWAP;       # pair (address %harbingerContractAddress) (nat %maxDataDelaySec) : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setMaxDataDelaySec
                    CAR;        # address : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))) : @parameter%setMaxDataDelaySec
                    DIG 3;      # @parameter%setMaxDataDelaySec : address : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    SWAP;       # address : @parameter%setMaxDataDelaySec : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    PAIR;       # pair address @parameter%setMaxDataDelaySec : pair (address %executorContractAddress) (address %governorContractAddress) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    SWAP;       # pair (address %executorContractAddress) (address %governorContractAddress) : pair address @parameter%setMaxDataDelaySec : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair address @parameter%setMaxDataDelaySec) : pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))
                    PAIR;       # pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair address @parameter%setMaxDataDelaySec)) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                  }; # pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair address nat)) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
                NIL operation; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair address nat)) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
              }
              {
                IF_LEFT
                  {
                    # == setSlippageTolerance == # @parameter%setSlippageTolerance : @storage
                    AMOUNT;     # @amount : @parameter%setSlippageTolerance : @storage
                    PUSH mutez 0; # mutez : @amount : @parameter%setSlippageTolerance : @storage
                    COMPARE;    # int : @parameter%setSlippageTolerance : @storage
                    EQ;         # bool : @parameter%setSlippageTolerance : @storage
                    IF
                      {}
                      {
                        AMOUNT;     # @amount : @parameter%setSlippageTolerance : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSlippageTolerance : @storage
                    SWAP;       # @storage : @parameter%setSlippageTolerance
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setSlippageTolerance
                    DUP;        # @storage : @storage : @parameter%setSlippageTolerance
                    DUG 2;      # @storage : @parameter%setSlippageTolerance : @storage
                    CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%setSlippageTolerance : @storage
                    CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%setSlippageTolerance : @storage
                    CDR;        # address : @parameter%setSlippageTolerance : @storage
                    SENDER;     # @sender : address : @parameter%setSlippageTolerance : @storage
                    COMPARE;    # int : @parameter%setSlippageTolerance : @storage
                    EQ;         # bool : @parameter%setSlippageTolerance : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setSlippageTolerance : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSlippageTolerance : @storage
                    # self.data.slippageTolerance = params # @parameter%setSlippageTolerance : @storage
                    UPDATE 5;   # @storage
                    NIL operation; # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # == veto == # @parameter%veto : @storage
                        AMOUNT;     # @amount : @parameter%veto : @storage
                        PUSH mutez 0; # mutez : @amount : @parameter%veto : @storage
                        COMPARE;    # int : @parameter%veto : @storage
                        EQ;         # bool : @parameter%veto : @storage
                        IF
                          {}
                          {
                            AMOUNT;     # @amount : @parameter%veto : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%veto : @storage
                        SWAP;       # @storage : @parameter%veto
                        # sp.verify(sp.sender == self.data.executorContractAddress, 2) # @storage : @parameter%veto
                        DUP;        # @storage : @storage : @parameter%veto
                        DUG 2;      # @storage : @parameter%veto : @storage
                        CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%veto : @storage
                        CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%veto : @storage
                        CAR;        # address : @parameter%veto : @storage
                        SENDER;     # @sender : address : @parameter%veto : @storage
                        COMPARE;    # int : @parameter%veto : @storage
                        EQ;         # bool : @parameter%veto : @storage
                        IF
                          {}
                          {
                            PUSH int 2; # int : @parameter%veto : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%veto : @storage
                        # sp.transfer((params.value, params.voter), sp.tez(0), sp.contract(sp.TPair(sp.TNat, sp.TAddress), self.data.quipuswapContractAddress, entry_point='veto').open_some(message = 13)) # @parameter%veto : @storage
                        NIL operation; # list operation : @parameter%veto : @storage
                        DUP 3;      # @storage : list operation : @parameter%veto : @storage
                        GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : list operation : @parameter%veto : @storage
                        CAR;        # address : list operation : @parameter%veto : @storage
                        CONTRACT %veto (pair nat address); # option (contract (pair nat address)) : list operation : @parameter%veto : @storage
                        IF_NONE
                          {
                            PUSH int 13; # int : list operation : @parameter%veto : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%veto : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%veto : @storage
                        DIG 3;      # @parameter%veto : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }
                      {
                        # == vote == # @parameter%vote : @storage
                        AMOUNT;     # @amount : @parameter%vote : @storage
                        PUSH mutez 0; # mutez : @amount : @parameter%vote : @storage
                        COMPARE;    # int : @parameter%vote : @storage
                        EQ;         # bool : @parameter%vote : @storage
                        IF
                          {}
                          {
                            AMOUNT;     # @amount : @parameter%vote : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%vote : @storage
                        SWAP;       # @storage : @parameter%vote
                        # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%vote
                        DUP;        # @storage : @storage : @parameter%vote
                        DUG 2;      # @storage : @parameter%vote : @storage
                        CAR;        # pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair (address %harbingerContractAddress) (nat %maxDataDelaySec)) : @parameter%vote : @storage
                        CAR;        # pair (address %executorContractAddress) (address %governorContractAddress) : @parameter%vote : @storage
                        CDR;        # address : @parameter%vote : @storage
                        SENDER;     # @sender : address : @parameter%vote : @storage
                        COMPARE;    # int : @parameter%vote : @storage
                        EQ;         # bool : @parameter%vote : @storage
                        IF
                          {}
                          {
                            PUSH int 1; # int : @parameter%vote : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%vote : @storage
                        # sp.transfer(((params.candidate, params.value), params.voter), sp.tez(0), sp.contract(sp.TPair(sp.TPair(sp.TKeyHash, sp.TNat), sp.TAddress), self.data.quipuswapContractAddress, entry_point='vote').open_some(message = 13)) # @parameter%vote : @storage
                        NIL operation; # list operation : @parameter%vote : @storage
                        DUP 3;      # @storage : list operation : @parameter%vote : @storage
                        GET 3;      # pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address) : list operation : @parameter%vote : @storage
                        CAR;        # address : list operation : @parameter%vote : @storage
                        CONTRACT %vote (pair (pair key_hash nat) address); # option (contract (pair (pair key_hash nat) address)) : list operation : @parameter%vote : @storage
                        IF_NONE
                          {
                            PUSH int 13; # int : list operation : @parameter%vote : @storage
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : list operation : @parameter%vote : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%vote : @storage
                        DIG 3;      # @parameter%vote : mutez : @some : list operation : @storage
                        DUP;        # @parameter%vote : @parameter%vote : mutez : @some : list operation : @storage
                        CDR;        # address : @parameter%vote : mutez : @some : list operation : @storage
                        SWAP;       # @parameter%vote : address : mutez : @some : list operation : @storage
                        DUP;        # @parameter%vote : @parameter%vote : address : mutez : @some : list operation : @storage
                        CAR;        # pair (key_hash %candidate) (nat %value) : @parameter%vote : address : mutez : @some : list operation : @storage
                        CDR;        # nat : @parameter%vote : address : mutez : @some : list operation : @storage
                        SWAP;       # @parameter%vote : nat : address : mutez : @some : list operation : @storage
                        CAR;        # pair (key_hash %candidate) (nat %value) : nat : address : mutez : @some : list operation : @storage
                        CAR;        # key_hash : nat : address : mutez : @some : list operation : @storage
                        PAIR;       # pair key_hash nat : address : mutez : @some : list operation : @storage
                        PAIR;       # pair (pair key_hash nat) address : mutez : @some : list operation : @storage
                        TRANSFER_TOKENS; # operation : list operation : @storage
                        CONS;       # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (address %executorContractAddress) (address %governorContractAddress)) (pair address nat)) (pair (pair (address %quipuswapContractAddress) (option %sendAllTokens_destination address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
          }; # list operation : pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
      }; # list operation : pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
    NIL operation; # list operation : list operation : pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
    SWAP;       # list operation : list operation : pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
      }; # list operation : pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress))))
    PAIR;       # pair (list operation) (pair (pair (pair address address) (pair address nat)) (pair (pair address (option address)) (pair (nat %slippageTolerance) (pair (int %state) (address %tokenContractAddress)))))
  };
