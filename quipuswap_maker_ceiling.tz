parameter (or (or (or (or (unit %pause) (nat %redeemCallback)) (or (unit %returnBalance) (address %setGovernorContract))) (or (or (nat %setMaxDataDelaySec) (nat %setMinTradeDelaySec)) (or (address %setPauseGuardianContract) (address %setQuipuswapContract)))) (or (or (or (address %setReceiverContract) (address %setSpotContract)) (or (nat %setSpreadAmount) (nat %setTradeAmount))) (or (or (nat %setVolatilityTolerance) (address %setVwapContract)) (or (unit %tokenToTezPayment) (unit %unpause)))));
storage   (pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == pause ==
                    # sp.verify(sp.sender == self.data.pauseGuardianContractAddress, 3) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    GET 3;      # pair (address %pauseGuardianContractAddress) (bool %paused) : @storage
                    CAR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 3; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.paused = True # @storage
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    UNPAIR;     # pair (address %pauseGuardianContractAddress) (bool %paused) : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    CAR;        # address : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PUSH bool True; # bool : address : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # address : bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair address bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%redeemCallback
                    # == redeemCallback ==
                    # sp.verify(sp.sender == self.data.tokenAddress, 10) # @storage : @parameter%redeemCallback
                    DUP;        # @storage : @storage : @parameter%redeemCallback
                    DUG 2;      # @storage : @parameter%redeemCallback : @storage
                    GET 3;      # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : @parameter%redeemCallback : @storage
                    GET 4;      # address : @parameter%redeemCallback : @storage
                    SENDER;     # @sender : address : @parameter%redeemCallback : @storage
                    COMPARE;    # int : @parameter%redeemCallback : @storage
                    EQ;         # bool : @parameter%redeemCallback : @storage
                    IF
                      {}
                      {
                        PUSH int 10; # int : @parameter%redeemCallback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeemCallback : @storage
                    SWAP;       # @storage : @parameter%redeemCallback
                    # self.data.tokenBalance = params # @storage : @parameter%redeemCallback
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%redeemCallback
                    SWAP;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%redeemCallback
                    UNPAIR;     # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%redeemCallback
                    SWAP;       # pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%redeemCallback
                    UNPAIR;     # pair (nat %tokenBalance) (nat %tradeAmount) : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%redeemCallback
                    CDR;        # nat : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%redeemCallback
                    DIG 4;      # @parameter%redeemCallback : nat : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair @parameter%redeemCallback nat : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair @parameter%redeemCallback nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair @parameter%redeemCallback nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair @parameter%redeemCallback nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair @parameter%redeemCallback nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair @parameter%redeemCallback nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                NIL operation; # list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == returnBalance ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @storage
                    CAR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.transfer((sp.self_address, sp.self_entry_point('redeemCallback')), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TContract(sp.TNat)), self.data.tokenAddress, entry_point='getBalance').open_some()) # @storage
                    DUP;        # @storage : @storage
                    GET 3;      # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : @storage
                    GET 4;      # address : @storage
                    CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : @storage
                    IF_NONE
                      {
                        PUSH int 190; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    NIL operation; # list operation : @some : @storage
                    SWAP;       # @some : list operation : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @storage
                    SELF %redeemCallback; # @self : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : @self : mutez : @some : list operation : @storage
                    PAIR;       # pair @self @self : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # sp.transfer((sp.self_address, self.data.receiverContractAddress, self.data.tokenBalance), sp.tez(0), sp.contract(sp.TTuple(sp.TAddress, sp.TAddress, sp.TNat), self.data.tokenAddress, entry_point='transfer').open_some()) # @storage : list operation
                    DUP;        # @storage : @storage : list operation
                    DUG 2;      # @storage : list operation : @storage
                    GET 3;      # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : list operation : @storage
                    GET 4;      # address : list operation : @storage
                    CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : list operation : @storage
                    IF_NONE
                      {
                        PUSH int 180; # int : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @storage
                    DIG 3;      # @storage : mutez : @some : list operation
                    DUP;        # @storage : @storage : mutez : @some : list operation
                    GET 5;      # pair (nat %tokenBalance) (nat %tradeAmount) : @storage : mutez : @some : list operation
                    CAR;        # nat : @storage : mutez : @some : list operation
                    SWAP;       # @storage : nat : mutez : @some : list operation
                    DUP;        # @storage : @storage : nat : mutez : @some : list operation
                    DUG 5;      # @storage : nat : mutez : @some : list operation : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : nat : mutez : @some : list operation : @storage
                    GET 6;      # address : nat : mutez : @some : list operation : @storage
                    PAIR;       # pair address nat : mutez : @some : list operation : @storage
                    SELF_ADDRESS; # @self : pair address nat : mutez : @some : list operation : @storage
                    PAIR;       # pair @self (pair address nat) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%setGovernorContract
                    # == setGovernorContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setGovernorContract
                    DUP;        # @storage : @storage : @parameter%setGovernorContract
                    DUG 2;      # @storage : @parameter%setGovernorContract : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setGovernorContract : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setGovernorContract : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setGovernorContract : @storage
                    CAR;        # address : @parameter%setGovernorContract : @storage
                    SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                    COMPARE;    # int : @parameter%setGovernorContract : @storage
                    EQ;         # bool : @parameter%setGovernorContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setGovernorContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setGovernorContract : @storage
                    SWAP;       # @storage : @parameter%setGovernorContract
                    # self.data.governorContractAddress = params # @storage : @parameter%setGovernorContract
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setGovernorContract
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setGovernorContract
                    UNPAIR;     # pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setGovernorContract
                    CDR;        # timestamp : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setGovernorContract
                    DIG 4;      # @parameter%setGovernorContract : timestamp : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair @parameter%setGovernorContract timestamp : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair @parameter%setGovernorContract timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair @parameter%setGovernorContract timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair @parameter%setGovernorContract timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    NIL operation; # list operation : pair (pair (pair (pair @parameter%setGovernorContract timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # list operation : pair (pair (pair (pair address timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }; # list operation : pair (pair (pair (pair address timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setMaxDataDelaySec
                    # == setMaxDataDelaySec ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setMaxDataDelaySec
                    DUP;        # @storage : @storage : @parameter%setMaxDataDelaySec
                    DUG 2;      # @storage : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # address : @parameter%setMaxDataDelaySec : @storage
                    SENDER;     # @sender : address : @parameter%setMaxDataDelaySec : @storage
                    COMPARE;    # int : @parameter%setMaxDataDelaySec : @storage
                    EQ;         # bool : @parameter%setMaxDataDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setMaxDataDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMaxDataDelaySec : @storage
                    SWAP;       # @storage : @parameter%setMaxDataDelaySec
                    # self.data.maxDataDelaySec = params # @storage : @parameter%setMaxDataDelaySec
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMaxDataDelaySec
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMaxDataDelaySec
                    UNPAIR;     # pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMaxDataDelaySec
                    SWAP;       # pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMaxDataDelaySec
                    CDR;        # nat : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMaxDataDelaySec
                    DIG 4;      # @parameter%setMaxDataDelaySec : nat : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair @parameter%setMaxDataDelaySec nat : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair @parameter%setMaxDataDelaySec nat : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair @parameter%setMaxDataDelaySec nat) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair @parameter%setMaxDataDelaySec nat)) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair @parameter%setMaxDataDelaySec nat)) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setMinTradeDelaySec
                    # == setMinTradeDelaySec ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setMinTradeDelaySec
                    DUP;        # @storage : @storage : @parameter%setMinTradeDelaySec
                    DUG 2;      # @storage : @parameter%setMinTradeDelaySec : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setMinTradeDelaySec : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setMinTradeDelaySec : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setMinTradeDelaySec : @storage
                    CAR;        # address : @parameter%setMinTradeDelaySec : @storage
                    SENDER;     # @sender : address : @parameter%setMinTradeDelaySec : @storage
                    COMPARE;    # int : @parameter%setMinTradeDelaySec : @storage
                    EQ;         # bool : @parameter%setMinTradeDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setMinTradeDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinTradeDelaySec : @storage
                    SWAP;       # @storage : @parameter%setMinTradeDelaySec
                    # self.data.minTradeDelaySec = params # @storage : @parameter%setMinTradeDelaySec
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMinTradeDelaySec
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMinTradeDelaySec
                    UNPAIR;     # pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMinTradeDelaySec
                    SWAP;       # pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMinTradeDelaySec
                    CAR;        # nat : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setMinTradeDelaySec
                    DIG 4;      # @parameter%setMinTradeDelaySec : nat : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # nat : @parameter%setMinTradeDelaySec : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair nat @parameter%setMinTradeDelaySec : pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair nat @parameter%setMinTradeDelaySec : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair nat @parameter%setMinTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair nat @parameter%setMinTradeDelaySec)) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair nat @parameter%setMinTradeDelaySec)) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair nat nat)) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setPauseGuardianContract
                    # == setPauseGuardianContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setPauseGuardianContract
                    DUP;        # @storage : @storage : @parameter%setPauseGuardianContract
                    DUG 2;      # @storage : @parameter%setPauseGuardianContract : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setPauseGuardianContract : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setPauseGuardianContract : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setPauseGuardianContract : @storage
                    CAR;        # address : @parameter%setPauseGuardianContract : @storage
                    SENDER;     # @sender : address : @parameter%setPauseGuardianContract : @storage
                    COMPARE;    # int : @parameter%setPauseGuardianContract : @storage
                    EQ;         # bool : @parameter%setPauseGuardianContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setPauseGuardianContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPauseGuardianContract : @storage
                    SWAP;       # @storage : @parameter%setPauseGuardianContract
                    # self.data.pauseGuardianContractAddress = params # @storage : @parameter%setPauseGuardianContract
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setPauseGuardianContract
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setPauseGuardianContract
                    SWAP;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setPauseGuardianContract
                    UNPAIR;     # pair (address %pauseGuardianContractAddress) (bool %paused) : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setPauseGuardianContract
                    CDR;        # bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setPauseGuardianContract
                    DIG 4;      # @parameter%setPauseGuardianContract : bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair @parameter%setPauseGuardianContract bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair @parameter%setPauseGuardianContract bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair @parameter%setPauseGuardianContract bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair @parameter%setPauseGuardianContract bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair @parameter%setPauseGuardianContract bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setQuipuswapContract
                    # == setQuipuswapContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setQuipuswapContract
                    DUP;        # @storage : @storage : @parameter%setQuipuswapContract
                    DUG 2;      # @storage : @parameter%setQuipuswapContract : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setQuipuswapContract : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setQuipuswapContract : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setQuipuswapContract : @storage
                    CAR;        # address : @parameter%setQuipuswapContract : @storage
                    SENDER;     # @sender : address : @parameter%setQuipuswapContract : @storage
                    COMPARE;    # int : @parameter%setQuipuswapContract : @storage
                    EQ;         # bool : @parameter%setQuipuswapContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setQuipuswapContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setQuipuswapContract : @storage
                    SWAP;       # @storage : @parameter%setQuipuswapContract
                    # self.data.quipuswapContractAddress = params # @storage : @parameter%setQuipuswapContract
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setQuipuswapContract
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setQuipuswapContract
                    SWAP;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setQuipuswapContract
                    UNPAIR;     # pair (address %pauseGuardianContractAddress) (bool %paused) : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setQuipuswapContract
                    SWAP;       # pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setQuipuswapContract
                    CDR;        # address : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setQuipuswapContract
                    DIG 4;      # @parameter%setQuipuswapContract : address : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair @parameter%setQuipuswapContract address : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (address %pauseGuardianContractAddress) (bool %paused) : pair @parameter%setQuipuswapContract address : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair @parameter%setQuipuswapContract address) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair @parameter%setQuipuswapContract address) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair @parameter%setQuipuswapContract address)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair @parameter%setQuipuswapContract address))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair address address))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
            NIL operation; # list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
          }; # list operation : pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setReceiverContract
                    # == setReceiverContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setReceiverContract
                    DUP;        # @storage : @storage : @parameter%setReceiverContract
                    DUG 2;      # @storage : @parameter%setReceiverContract : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setReceiverContract : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setReceiverContract : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setReceiverContract : @storage
                    CAR;        # address : @parameter%setReceiverContract : @storage
                    SENDER;     # @sender : address : @parameter%setReceiverContract : @storage
                    COMPARE;    # int : @parameter%setReceiverContract : @storage
                    EQ;         # bool : @parameter%setReceiverContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setReceiverContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setReceiverContract : @storage
                    SWAP;       # @storage : @parameter%setReceiverContract
                    # self.data.receiverContractAddress = params # @storage : @parameter%setReceiverContract
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setReceiverContract
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setReceiverContract
                    SWAP;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setReceiverContract
                    UNPAIR;     # pair (address %pauseGuardianContractAddress) (bool %paused) : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setReceiverContract
                    SWAP;       # pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setReceiverContract
                    CAR;        # address : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setReceiverContract
                    DIG 4;      # @parameter%setReceiverContract : address : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # address : @parameter%setReceiverContract : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair address @parameter%setReceiverContract : pair (address %pauseGuardianContractAddress) (bool %paused) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (address %pauseGuardianContractAddress) (bool %paused) : pair address @parameter%setReceiverContract : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address @parameter%setReceiverContract) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address @parameter%setReceiverContract) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address @parameter%setReceiverContract)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address @parameter%setReceiverContract))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setSpotContract
                    # == setSpotContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setSpotContract
                    DUP;        # @storage : @storage : @parameter%setSpotContract
                    DUG 2;      # @storage : @parameter%setSpotContract : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpotContract : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setSpotContract : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setSpotContract : @storage
                    CAR;        # address : @parameter%setSpotContract : @storage
                    SENDER;     # @sender : address : @parameter%setSpotContract : @storage
                    COMPARE;    # int : @parameter%setSpotContract : @storage
                    EQ;         # bool : @parameter%setSpotContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setSpotContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSpotContract : @storage
                    SWAP;       # @storage : @parameter%setSpotContract
                    # self.data.spotContractAddress = params # @storage : @parameter%setSpotContract
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setSpotContract
                    SWAP;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpotContract
                    UNPAIR;     # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpotContract
                    UNPAIR;     # pair (address %spotContractAddress) (nat %spotPrice) : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpotContract
                    CDR;        # nat : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpotContract
                    DIG 4;      # @parameter%setSpotContract : nat : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair @parameter%setSpotContract nat : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair @parameter%setSpotContract nat) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair (pair @parameter%setSpotContract nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair @parameter%setSpotContract nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair @parameter%setSpotContract nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address address))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setSpreadAmount
                    # == setSpreadAmount ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setSpreadAmount
                    DUP;        # @storage : @storage : @parameter%setSpreadAmount
                    DUG 2;      # @storage : @parameter%setSpreadAmount : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpreadAmount : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setSpreadAmount : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setSpreadAmount : @storage
                    CAR;        # address : @parameter%setSpreadAmount : @storage
                    SENDER;     # @sender : address : @parameter%setSpreadAmount : @storage
                    COMPARE;    # int : @parameter%setSpreadAmount : @storage
                    EQ;         # bool : @parameter%setSpreadAmount : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setSpreadAmount : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSpreadAmount : @storage
                    SWAP;       # @storage : @parameter%setSpreadAmount
                    # self.data.spreadAmount = params # @storage : @parameter%setSpreadAmount
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setSpreadAmount
                    SWAP;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpreadAmount
                    UNPAIR;     # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpreadAmount
                    UNPAIR;     # pair (address %spotContractAddress) (nat %spotPrice) : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpreadAmount
                    SWAP;       # pair (nat %spreadAmount) (address %tokenAddress) : pair (address %spotContractAddress) (nat %spotPrice) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpreadAmount
                    CDR;        # address : pair (address %spotContractAddress) (nat %spotPrice) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setSpreadAmount
                    DIG 4;      # @parameter%setSpreadAmount : address : pair (address %spotContractAddress) (nat %spotPrice) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair @parameter%setSpreadAmount address : pair (address %spotContractAddress) (nat %spotPrice) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (address %spotContractAddress) (nat %spotPrice) : pair @parameter%setSpreadAmount address : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair @parameter%setSpreadAmount address) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair @parameter%setSpreadAmount address)) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair @parameter%setSpreadAmount address)) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair @parameter%setSpreadAmount address)) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }
                  {
                    SWAP;       # @storage : @parameter%setTradeAmount
                    # == setTradeAmount ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setTradeAmount
                    DUP;        # @storage : @storage : @parameter%setTradeAmount
                    DUG 2;      # @storage : @parameter%setTradeAmount : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setTradeAmount : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setTradeAmount : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setTradeAmount : @storage
                    CAR;        # address : @parameter%setTradeAmount : @storage
                    SENDER;     # @sender : address : @parameter%setTradeAmount : @storage
                    COMPARE;    # int : @parameter%setTradeAmount : @storage
                    EQ;         # bool : @parameter%setTradeAmount : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setTradeAmount : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTradeAmount : @storage
                    SWAP;       # @storage : @parameter%setTradeAmount
                    # self.data.tradeAmount = params # @storage : @parameter%setTradeAmount
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @parameter%setTradeAmount
                    SWAP;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setTradeAmount
                    UNPAIR;     # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setTradeAmount
                    SWAP;       # pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setTradeAmount
                    UNPAIR;     # pair (nat %tokenBalance) (nat %tradeAmount) : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setTradeAmount
                    CAR;        # nat : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setTradeAmount
                    DIG 4;      # @parameter%setTradeAmount : nat : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # nat : @parameter%setTradeAmount : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair nat @parameter%setTradeAmount : pair (nat %volatilityTolerance) (address %vwapContractAddress) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair nat @parameter%setTradeAmount) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair nat @parameter%setTradeAmount) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat @parameter%setTradeAmount) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat @parameter%setTradeAmount) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair nat @parameter%setTradeAmount) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
            NIL operation; # list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    SWAP;       # @storage : @parameter%setVolatilityTolerance
                    # == setVolatilityTolerance ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setVolatilityTolerance
                    DUP;        # @storage : @storage : @parameter%setVolatilityTolerance
                    DUG 2;      # @storage : @parameter%setVolatilityTolerance : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setVolatilityTolerance : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setVolatilityTolerance : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setVolatilityTolerance : @storage
                    CAR;        # address : @parameter%setVolatilityTolerance : @storage
                    SENDER;     # @sender : address : @parameter%setVolatilityTolerance : @storage
                    COMPARE;    # int : @parameter%setVolatilityTolerance : @storage
                    EQ;         # bool : @parameter%setVolatilityTolerance : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setVolatilityTolerance : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setVolatilityTolerance : @storage
                    # self.data.volatilityTolerance = params # @parameter%setVolatilityTolerance : @storage
                    UPDATE 7;   # @storage
                  }
                  {
                    SWAP;       # @storage : @parameter%setVwapContract
                    # == setVwapContract ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage : @parameter%setVwapContract
                    DUP;        # @storage : @storage : @parameter%setVwapContract
                    DUG 2;      # @storage : @parameter%setVwapContract : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @parameter%setVwapContract : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @parameter%setVwapContract : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @parameter%setVwapContract : @storage
                    CAR;        # address : @parameter%setVwapContract : @storage
                    SENDER;     # @sender : address : @parameter%setVwapContract : @storage
                    COMPARE;    # int : @parameter%setVwapContract : @storage
                    EQ;         # bool : @parameter%setVwapContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setVwapContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setVwapContract : @storage
                    # self.data.vwapContractAddress = params # @parameter%setVwapContract : @storage
                    UPDATE 8;   # @storage
                  }; # @storage
                NIL operation; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == tokenToTezPayment ==
                    # sp.verify(self.data.paused == False, 5) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    GET 3;      # pair (address %pauseGuardianContractAddress) (bool %paused) : @storage
                    CDR;        # bool : @storage
                    PUSH bool False; # bool : bool : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 5; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # sp.verify(sp.as_nat(sp.now - self.data.lastTradeTime) >= self.data.minTradeDelaySec, 7) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @storage
                    GET 4;      # nat : @storage
                    SWAP;       # @storage : nat
                    DUP;        # @storage : @storage : nat
                    DUG 2;      # @storage : nat : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : nat : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : nat : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : nat : @storage
                    CDR;        # timestamp : nat : @storage
                    NOW;        # @now : timestamp : nat : @storage
                    SUB;        # int : nat : @storage
                    ISNAT;      # option nat : nat : @storage
                    IF_NONE
                      {
                        PUSH int 73; # int : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @storage
                    COMPARE;    # int : @storage
                    GE;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 7; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.spotPrice = sp.fst(sp.snd(sp.snd(sp.snd(sp.snd(sp.snd(sp.view("getPrice", 'XTZ-USD', self.data.spotContractAddress, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat))))))).open_some(message = 12))))))) # @storage
                    DUP;        # @storage : @storage
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : @storage
                    SWAP;       # pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    UNPAIR;     # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    UNPAIR;     # pair (address %spotContractAddress) (nat %spotPrice) : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    CAR;        # address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    DIG 4;      # @storage : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    GET 3;      # pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress)) : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    CAR;        # pair (address %spotContractAddress) (nat %spotPrice) : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    CAR;        # address : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PUSH string "XTZ-USD"; # string : address : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    VIEW "getPrice" (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat)))))); # option (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat)))))) : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    IF_NONE
                      {
                        PUSH int 12; # int : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    GET 11;     # nat : address : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # address : nat : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair address nat : pair (nat %spreadAmount) (address %tokenAddress) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    PAIR;       # pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))
                    SWAP;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    # sp.verify(sp.as_nat(sp.now - sp.fst(sp.snd(sp.view("getPrice", 'XTZ-USD', self.data.spotContractAddress, sp.TPair(sp.TTimestamp, sp.TPair(sp.TTimestamp, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TPair(sp.TNat, sp.TNat))))))).open_some(message = 12)))) <= self.data.maxDataDelaySec, 4) # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP;        # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SWAP;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat
                    DUP;        # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat
                    DUG 2;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair address nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # address : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH string "XTZ-USD"; # string : address : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    VIEW "getPrice" (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat)))))); # option (pair timestamp (pair timestamp (pair nat (pair nat (pair nat (pair nat nat)))))) : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 12; # int : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # timestamp : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    NOW;        # @now : timestamp : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SUB;        # int : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    ISNAT;      # option nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 115; # int : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    COMPARE;    # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    LE;         # bool : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF
                      {}
                      {
                        PUSH int 4; # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    # sp.verify(self.data.volatilityTolerance > (((abs(((sp.snd(sp.view("getPrice", 'XTZ-USD', self.data.vwapContractAddress, sp.TPair(sp.TTimestamp, sp.TNat)).open_some(message = 11)) * 1000000000000000000) // 1000000) - ((self.data.spotPrice * 1000000000000000000) // 1000000))) * 100) // ((self.data.spotPrice * 1000000000000000000) // 1000000)), 16) # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000; # nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000000000000000; # nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 3;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair address nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 120; # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 100; # nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000; # nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000000000000000; # nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 5;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair address nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 120; # int : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000; # nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000000000000000; # nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 6;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 8;      # address : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH string "XTZ-USD"; # string : address : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    VIEW "getPrice" (pair timestamp nat); # option (pair timestamp nat) : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 11; # int : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 119; # int : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SUB;        # int : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    ABS;        # nat : nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 123; # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SWAP;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat
                    DUP;        # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat
                    DUG 2;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 7;      # nat : nat : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    COMPARE;    # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GT;         # bool : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF
                      {}
                      {
                        PUSH int 16; # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }; # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    # sp.transfer((self.data.quipuswapContractAddress, self.data.tradeAmount * 1000000000000000000), sp.tez(0), sp.contract(sp.TPair(sp.TAddress, sp.TNat), self.data.tokenAddress, entry_point='approve').open_some(message = 15)) # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP;        # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 4;      # address : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CONTRACT %approve (pair address nat); # option (contract (pair address nat)) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 15; # int : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    NIL operation; # list operation : @some : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SWAP;       # @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000000000000000; # nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 5;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 5;      # pair (nat %tokenBalance) (nat %tradeAmount) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 5;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 5;      # address : nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PAIR;       # pair address nat : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CONS;       # list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SWAP;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation
                    # sp.transfer(((self.data.tradeAmount * 1000000000000000000, ((((self.data.tradeAmount * 1000000000000000000) // self.data.spotPrice) // 1000000) * (100 + self.data.spreadAmount)) // 100), self.data.receiverContractAddress), sp.tez(0), sp.contract(sp.TPair(sp.TPair(sp.TNat, sp.TNat), sp.TAddress), self.data.quipuswapContractAddress, entry_point='tokenToTezPayment').open_some(message = 13)) # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation
                    DUP;        # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation
                    DUG 2;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 5;      # address : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CONTRACT %tokenToTezPayment (pair (pair nat nat) address); # option (contract (pair (pair nat nat) address)) : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 13; # int : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 4;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 6;      # address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 100; # nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 6;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 100; # nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    ADD;        # nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000; # nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 8;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 3;      # pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress)) : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CAR;        # pair address nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000000000000000; # nat : nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 10;     # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 5;      # pair (nat %tokenBalance) (nat %tradeAmount) : nat : nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 131; # int : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 131; # int : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    EDIV;       # option (pair nat nat) : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    IF_NONE
                      {
                        PUSH int 136; # int : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                      }; # nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PUSH nat 1000000000000000000; # nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    DUP 7;      # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    GET 5;      # pair (nat %tokenBalance) (nat %tradeAmount) : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CDR;        # nat : nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    MUL;        # nat : nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PAIR;       # pair nat nat : address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    PAIR;       # pair (pair nat nat) address : mutez : @some : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    CONS;       # list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    SWAP;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation
                    # self.data.lastTradeTime = sp.now # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    UNPAIR;     # pair (address %governorContractAddress) (timestamp %lastTradeTime) : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    CAR;        # address : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    NOW;        # @now : address : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    SWAP;       # address : @now : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    PAIR;       # pair address @now : pair (nat %maxDataDelaySec) (nat %minTradeDelaySec) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    PAIR;       # pair (pair address @now) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    PAIR;       # pair (pair (pair address @now) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))) : list operation
                    PAIR;       # pair (pair (pair (pair address @now) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))) : list operation
                    SWAP;       # list operation : pair (pair (pair (pair address @now) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }
                  {
                    DROP;       # @storage
                    # == unpause ==
                    # sp.verify(sp.sender == self.data.governorContractAddress, 1) # @storage
                    DUP;        # @storage : @storage
                    CAR;        # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : @storage
                    CAR;        # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : @storage
                    CAR;        # pair (address %governorContractAddress) (timestamp %lastTradeTime) : @storage
                    CAR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.paused = False # @storage
                    UNPAIR;     # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    UNPAIR;     # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %pauseGuardianContractAddress) (bool %paused)) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    UNPAIR;     # pair (address %pauseGuardianContractAddress) (bool %paused) : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    CAR;        # address : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PUSH bool False; # bool : address : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # address : bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair address bool : pair (address %quipuswapContractAddress) (address %receiverContractAddress) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    SWAP;       # pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec)) : pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress))) : pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))
                    PAIR;       # pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                    NIL operation; # list operation : pair (pair (pair (pair (address %governorContractAddress) (timestamp %lastTradeTime)) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair (address %spotContractAddress) (nat %spotPrice)) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
                  }; # list operation : pair (pair (pair (pair address timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
              }; # list operation : pair (pair (pair (pair address timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair (address %quipuswapContractAddress) (address %receiverContractAddress)))) (pair (pair (pair address nat) (pair (nat %spreadAmount) (address %tokenAddress))) (pair (pair (nat %tokenBalance) (nat %tradeAmount)) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
          }; # list operation : pair (pair (pair (pair address timestamp) (pair (nat %maxDataDelaySec) (nat %minTradeDelaySec))) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
      }; # list operation : pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
    NIL operation; # list operation : list operation : pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
    SWAP;       # list operation : list operation : pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
      }; # list operation : pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair address timestamp) (pair nat nat)) (pair (pair address bool) (pair address address))) (pair (pair (pair address nat) (pair nat address)) (pair (pair nat nat) (pair (nat %volatilityTolerance) (address %vwapContractAddress)))))
  };
