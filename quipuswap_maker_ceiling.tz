parameter (or (or (or (unit %pause) (or (nat %redeemCallback) (unit %returnBalance))) (or (or (address %setGovernorContract) (nat %setMaxDataDelaySec)) (or (nat %setMinTradeDelaySec) (address %setPauseGuardianContract)))) (or (or (or (address %setQuipuswapContract) (address %setReceiverContract)) (or (address %setSpotContract) (nat %setSpreadAmount))) (or (or (address %setTokenContract) (nat %setTradeAmount)) (or (unit %tokenToTezPayment) (unit %unpause)))));
storage   (pair (address %governorContractAddress) (pair (timestamp %lastTradeTime) (pair (nat %maxDataDelaySec) (pair (nat %minTradeDelaySec) (pair (address %pauseGuardianContractAddress) (pair (bool %paused) (pair (address %quipuswapContractAddress) (pair (address %receiverContractAddress) (pair (address %spotContractAddress) (pair (nat %spreadAmount) (pair (int %state) (pair (address %tokenAddress) (pair (nat %tokenBalance) (nat %tradeAmount))))))))))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                DROP;       # @storage
                # == pause ==
                # assert sp.amount == sp.tez(0) # @storage
                PUSH mutez 0; # mutez : @storage
                AMOUNT;     # @amount : mutez : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # assert ( # @storage
                DUP;        # @storage : @storage
                GET 9;      # address : @storage
                SENDER;     # @sender : address : @storage
                COMPARE;    # int : @storage
                EQ;         # bool : @storage
                IF
                  {}
                  {
                    PUSH int 3; # int : @storage
                    FAILWITH;   # FAILED
                  }; # @storage
                # self.data.paused = True # @storage
                PUSH bool True; # bool : @storage
                UPDATE 11;  # @storage
                NIL operation; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    # == redeemCallback ==
                    # assert sp.amount == sp.tez(0) # @parameter%redeemCallback : @storage
                    PUSH mutez 0; # mutez : @parameter%redeemCallback : @storage
                    AMOUNT;     # @amount : mutez : @parameter%redeemCallback : @storage
                    COMPARE;    # int : @parameter%redeemCallback : @storage
                    EQ;         # bool : @parameter%redeemCallback : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%redeemCallback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeemCallback : @storage
                    # updatedBalance = sp.cast(updatedBalance, sp.nat)
                    # assert sp.sender == self.data.tokenAddress, Errors.BAD_SENDER # @parameter%redeemCallback : @storage
                    DUP 2;      # @storage : @parameter%redeemCallback : @storage
                    GET 23;     # address : @parameter%redeemCallback : @storage
                    SENDER;     # @sender : address : @parameter%redeemCallback : @storage
                    COMPARE;    # int : @parameter%redeemCallback : @storage
                    EQ;         # bool : @parameter%redeemCallback : @storage
                    IF
                      {}
                      {
                        PUSH int 10; # int : @parameter%redeemCallback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeemCallback : @storage
                    # assert self.data.state == WAITING_FOR_TOKEN_BALANCE, Errors.BAD_STATE # @parameter%redeemCallback : @storage
                    PUSH int 1; # int : @parameter%redeemCallback : @storage
                    DUP 3;      # @storage : int : @parameter%redeemCallback : @storage
                    GET 21;     # int : int : @parameter%redeemCallback : @storage
                    COMPARE;    # int : @parameter%redeemCallback : @storage
                    EQ;         # bool : @parameter%redeemCallback : @storage
                    IF
                      {}
                      {
                        PUSH int 14; # int : @parameter%redeemCallback : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%redeemCallback : @storage
                    # self.data.tokenBalance = updatedBalance # @parameter%redeemCallback : @storage
                    UPDATE 25;  # @storage
                    # sendParam = ( # @storage
                    DUP;        # @storage : @storage
                    GET 25;     # nat : @storage
                    DUP 2;      # @storage : nat : @storage
                    GET 15;     # address : nat : @storage
                    PAIR;       # pair address nat : @storage
                    SELF_ADDRESS; # @self : pair address nat : @storage
                    PAIR;       # pair @self (pair address nat) : @storage
                    # sendHandle = sp.contract( # pair @self (pair address nat) : @storage
                    DUP 2;      # @storage : pair @self (pair address nat) : @storage
                    GET 23;     # address : pair @self (pair address nat) : @storage
                    CONTRACT %transfer (pair address (pair address nat)); # option (contract (pair address (pair address nat))) : pair @self (pair address nat) : @storage
                    IF_NONE
                      {
                        PUSH int 334; # int : pair @self (pair address nat) : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair @self (pair address nat) : @storage
                    # sp.transfer(sendParam, sp.mutez(0), sendHandle) # @some : pair @self (pair address nat) : @storage
                    NIL operation; # list operation : @some : pair @self (pair address nat) : @storage
                    SWAP;       # @some : list operation : pair @self (pair address nat) : @storage
                    PUSH mutez 0; # mutez : @some : list operation : pair @self (pair address nat) : @storage
                    DIG 3;      # pair @self (pair address nat) : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = IDLE # @storage : list operation
                    PUSH int 0; # int : @storage : list operation
                    UPDATE 21;  # @storage : list operation
                    SWAP;       # list operation : @storage
                  }
                  {
                    DROP;       # @storage
                    # == returnBalance ==
                    # assert sp.amount == sp.tez(0) # @storage
                    PUSH mutez 0; # mutez : @storage
                    AMOUNT;     # @amount : mutez : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @storage
                    DUP;        # @storage : @storage
                    CAR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # assert self.data.state == IDLE, Errors.BAD_STATE # @storage
                    PUSH int 0; # int : @storage
                    DUP 2;      # @storage : int : @storage
                    GET 21;     # int : int : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 14; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # param = ( # @storage
                    SELF %redeemCallback; # @self : @storage
                    SELF_ADDRESS; # @self : @self : @storage
                    PAIR;       # pair @self @self : @storage
                    # contractHandle = sp.contract( # pair @self @self : @storage
                    DUP 2;      # @storage : pair @self @self : @storage
                    GET 23;     # address : pair @self @self : @storage
                    CONTRACT %getBalance (pair address (contract nat)); # option (contract (pair address (contract nat))) : pair @self @self : @storage
                    IF_NONE
                      {
                        PUSH int 303; # int : pair @self @self : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : pair @self @self : @storage
                    # sp.transfer(param, sp.mutez(0), contractHandle) # @some : pair @self @self : @storage
                    NIL operation; # list operation : @some : pair @self @self : @storage
                    SWAP;       # @some : list operation : pair @self @self : @storage
                    PUSH mutez 0; # mutez : @some : list operation : pair @self @self : @storage
                    DIG 3;      # pair @self @self : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.state = WAITING_FOR_TOKEN_BALANCE # @storage : list operation
                    PUSH int 1; # int : @storage : list operation
                    UPDATE 21;  # @storage : list operation
                    SWAP;       # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == setGovernorContract ==
                    # assert sp.amount == sp.tez(0) # @parameter%setGovernorContract : @storage
                    PUSH mutez 0; # mutez : @parameter%setGovernorContract : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setGovernorContract : @storage
                    COMPARE;    # int : @parameter%setGovernorContract : @storage
                    EQ;         # bool : @parameter%setGovernorContract : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setGovernorContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setGovernorContract : @storage
                    # newGovernorContractAddress = sp.cast(newGovernorContractAddress, sp.address)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setGovernorContract : @storage
                    DUP 2;      # @storage : @parameter%setGovernorContract : @storage
                    CAR;        # address : @parameter%setGovernorContract : @storage
                    SENDER;     # @sender : address : @parameter%setGovernorContract : @storage
                    COMPARE;    # int : @parameter%setGovernorContract : @storage
                    EQ;         # bool : @parameter%setGovernorContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setGovernorContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setGovernorContract : @storage
                    # self.data.governorContractAddress = newGovernorContractAddress # @parameter%setGovernorContract : @storage
                    UPDATE 1;   # @storage
                  }
                  {
                    # == setMaxDataDelaySec ==
                    # assert sp.amount == sp.tez(0) # @parameter%setMaxDataDelaySec : @storage
                    PUSH mutez 0; # mutez : @parameter%setMaxDataDelaySec : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setMaxDataDelaySec : @storage
                    COMPARE;    # int : @parameter%setMaxDataDelaySec : @storage
                    EQ;         # bool : @parameter%setMaxDataDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setMaxDataDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMaxDataDelaySec : @storage
                    # newMaxDataDelaySec = sp.cast(newMaxDataDelaySec, sp.nat)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setMaxDataDelaySec : @storage
                    DUP 2;      # @storage : @parameter%setMaxDataDelaySec : @storage
                    CAR;        # address : @parameter%setMaxDataDelaySec : @storage
                    SENDER;     # @sender : address : @parameter%setMaxDataDelaySec : @storage
                    COMPARE;    # int : @parameter%setMaxDataDelaySec : @storage
                    EQ;         # bool : @parameter%setMaxDataDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setMaxDataDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMaxDataDelaySec : @storage
                    # self.data.maxDataDelaySec = newMaxDataDelaySec # @parameter%setMaxDataDelaySec : @storage
                    UPDATE 5;   # @storage
                  }; # @storage
              }
              {
                IF_LEFT
                  {
                    # == setMinTradeDelaySec ==
                    # assert sp.amount == sp.tez(0) # @parameter%setMinTradeDelaySec : @storage
                    PUSH mutez 0; # mutez : @parameter%setMinTradeDelaySec : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setMinTradeDelaySec : @storage
                    COMPARE;    # int : @parameter%setMinTradeDelaySec : @storage
                    EQ;         # bool : @parameter%setMinTradeDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setMinTradeDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinTradeDelaySec : @storage
                    # newMinTradeDelaySec = sp.cast(newMinTradeDelaySec, sp.nat)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setMinTradeDelaySec : @storage
                    DUP 2;      # @storage : @parameter%setMinTradeDelaySec : @storage
                    CAR;        # address : @parameter%setMinTradeDelaySec : @storage
                    SENDER;     # @sender : address : @parameter%setMinTradeDelaySec : @storage
                    COMPARE;    # int : @parameter%setMinTradeDelaySec : @storage
                    EQ;         # bool : @parameter%setMinTradeDelaySec : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setMinTradeDelaySec : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setMinTradeDelaySec : @storage
                    # self.data.minTradeDelaySec = newMinTradeDelaySec # @parameter%setMinTradeDelaySec : @storage
                    UPDATE 7;   # @storage
                  }
                  {
                    # == setPauseGuardianContract ==
                    # assert sp.amount == sp.tez(0) # @parameter%setPauseGuardianContract : @storage
                    PUSH mutez 0; # mutez : @parameter%setPauseGuardianContract : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setPauseGuardianContract : @storage
                    COMPARE;    # int : @parameter%setPauseGuardianContract : @storage
                    EQ;         # bool : @parameter%setPauseGuardianContract : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setPauseGuardianContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPauseGuardianContract : @storage
                    # newPauseGuardianContractAddress = sp.cast(
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setPauseGuardianContract : @storage
                    DUP 2;      # @storage : @parameter%setPauseGuardianContract : @storage
                    CAR;        # address : @parameter%setPauseGuardianContract : @storage
                    SENDER;     # @sender : address : @parameter%setPauseGuardianContract : @storage
                    COMPARE;    # int : @parameter%setPauseGuardianContract : @storage
                    EQ;         # bool : @parameter%setPauseGuardianContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setPauseGuardianContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setPauseGuardianContract : @storage
                    # self.data.pauseGuardianContractAddress = newPauseGuardianContractAddress # @parameter%setPauseGuardianContract : @storage
                    UPDATE 9;   # @storage
                  }; # @storage
              }; # @storage
            NIL operation; # list operation : @storage
          }; # list operation : @storage
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == setQuipuswapContract ==
                    # assert sp.amount == sp.tez(0) # @parameter%setQuipuswapContract : @storage
                    PUSH mutez 0; # mutez : @parameter%setQuipuswapContract : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setQuipuswapContract : @storage
                    COMPARE;    # int : @parameter%setQuipuswapContract : @storage
                    EQ;         # bool : @parameter%setQuipuswapContract : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setQuipuswapContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setQuipuswapContract : @storage
                    # newQuipuswapContractAddress = sp.cast(
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setQuipuswapContract : @storage
                    DUP 2;      # @storage : @parameter%setQuipuswapContract : @storage
                    CAR;        # address : @parameter%setQuipuswapContract : @storage
                    SENDER;     # @sender : address : @parameter%setQuipuswapContract : @storage
                    COMPARE;    # int : @parameter%setQuipuswapContract : @storage
                    EQ;         # bool : @parameter%setQuipuswapContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setQuipuswapContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setQuipuswapContract : @storage
                    # self.data.quipuswapContractAddress = newQuipuswapContractAddress # @parameter%setQuipuswapContract : @storage
                    UPDATE 13;  # @storage
                  }
                  {
                    # == setReceiverContract ==
                    # assert sp.amount == sp.tez(0) # @parameter%setReceiverContract : @storage
                    PUSH mutez 0; # mutez : @parameter%setReceiverContract : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setReceiverContract : @storage
                    COMPARE;    # int : @parameter%setReceiverContract : @storage
                    EQ;         # bool : @parameter%setReceiverContract : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setReceiverContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setReceiverContract : @storage
                    # newReceiverContractAddress = sp.cast(newReceiverContractAddress, sp.address)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setReceiverContract : @storage
                    DUP 2;      # @storage : @parameter%setReceiverContract : @storage
                    CAR;        # address : @parameter%setReceiverContract : @storage
                    SENDER;     # @sender : address : @parameter%setReceiverContract : @storage
                    COMPARE;    # int : @parameter%setReceiverContract : @storage
                    EQ;         # bool : @parameter%setReceiverContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setReceiverContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setReceiverContract : @storage
                    # self.data.receiverContractAddress = newReceiverContractAddress # @parameter%setReceiverContract : @storage
                    UPDATE 15;  # @storage
                  }; # @storage
              }
              {
                IF_LEFT
                  {
                    # == setSpotContract ==
                    # assert sp.amount == sp.tez(0) # @parameter%setSpotContract : @storage
                    PUSH mutez 0; # mutez : @parameter%setSpotContract : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setSpotContract : @storage
                    COMPARE;    # int : @parameter%setSpotContract : @storage
                    EQ;         # bool : @parameter%setSpotContract : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setSpotContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSpotContract : @storage
                    # newSpotContractAddress = sp.cast(newSpotContractAddress, sp.address)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setSpotContract : @storage
                    DUP 2;      # @storage : @parameter%setSpotContract : @storage
                    CAR;        # address : @parameter%setSpotContract : @storage
                    SENDER;     # @sender : address : @parameter%setSpotContract : @storage
                    COMPARE;    # int : @parameter%setSpotContract : @storage
                    EQ;         # bool : @parameter%setSpotContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setSpotContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSpotContract : @storage
                    # self.data.spotContractAddress = newSpotContractAddress # @parameter%setSpotContract : @storage
                    UPDATE 17;  # @storage
                  }
                  {
                    # == setSpreadAmount ==
                    # assert sp.amount == sp.tez(0) # @parameter%setSpreadAmount : @storage
                    PUSH mutez 0; # mutez : @parameter%setSpreadAmount : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setSpreadAmount : @storage
                    COMPARE;    # int : @parameter%setSpreadAmount : @storage
                    EQ;         # bool : @parameter%setSpreadAmount : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setSpreadAmount : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSpreadAmount : @storage
                    # newSpreadAmount = sp.cast(newSpreadAmount, sp.nat)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setSpreadAmount : @storage
                    DUP 2;      # @storage : @parameter%setSpreadAmount : @storage
                    CAR;        # address : @parameter%setSpreadAmount : @storage
                    SENDER;     # @sender : address : @parameter%setSpreadAmount : @storage
                    COMPARE;    # int : @parameter%setSpreadAmount : @storage
                    EQ;         # bool : @parameter%setSpreadAmount : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setSpreadAmount : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setSpreadAmount : @storage
                    # self.data.spreadAmount = newSpreadAmount # @parameter%setSpreadAmount : @storage
                    UPDATE 19;  # @storage
                  }; # @storage
              }; # @storage
            NIL operation; # list operation : @storage
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # == setTokenContract ==
                    # assert sp.amount == sp.tez(0) # @parameter%setTokenContract : @storage
                    PUSH mutez 0; # mutez : @parameter%setTokenContract : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setTokenContract : @storage
                    COMPARE;    # int : @parameter%setTokenContract : @storage
                    EQ;         # bool : @parameter%setTokenContract : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setTokenContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTokenContract : @storage
                    # newTokenContractAddress = sp.cast(newTokenContractAddress, sp.address)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setTokenContract : @storage
                    DUP 2;      # @storage : @parameter%setTokenContract : @storage
                    CAR;        # address : @parameter%setTokenContract : @storage
                    SENDER;     # @sender : address : @parameter%setTokenContract : @storage
                    COMPARE;    # int : @parameter%setTokenContract : @storage
                    EQ;         # bool : @parameter%setTokenContract : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setTokenContract : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTokenContract : @storage
                    # self.data.tokenAddress = newTokenContractAddress # @parameter%setTokenContract : @storage
                    UPDATE 23;  # @storage
                  }
                  {
                    # == setTradeAmount ==
                    # assert sp.amount == sp.tez(0) # @parameter%setTradeAmount : @storage
                    PUSH mutez 0; # mutez : @parameter%setTradeAmount : @storage
                    AMOUNT;     # @amount : mutez : @parameter%setTradeAmount : @storage
                    COMPARE;    # int : @parameter%setTradeAmount : @storage
                    EQ;         # bool : @parameter%setTradeAmount : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @parameter%setTradeAmount : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTradeAmount : @storage
                    # newTradeAmount = sp.cast(newTradeAmount, sp.nat)
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @parameter%setTradeAmount : @storage
                    DUP 2;      # @storage : @parameter%setTradeAmount : @storage
                    CAR;        # address : @parameter%setTradeAmount : @storage
                    SENDER;     # @sender : address : @parameter%setTradeAmount : @storage
                    COMPARE;    # int : @parameter%setTradeAmount : @storage
                    EQ;         # bool : @parameter%setTradeAmount : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @parameter%setTradeAmount : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%setTradeAmount : @storage
                    # self.data.tradeAmount = newTradeAmount # @parameter%setTradeAmount : @storage
                    UPDATE 26;  # @storage
                  }; # @storage
                NIL operation; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    DROP;       # @storage
                    # == tokenToTezPayment ==
                    # assert sp.amount == sp.tez(0) # @storage
                    PUSH mutez 0; # mutez : @storage
                    AMOUNT;     # @amount : mutez : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # assert not self.data.paused, Errors.PAUSED # @storage
                    DUP;        # @storage : @storage
                    GET 11;     # bool : @storage
                    IF
                      {
                        PUSH int 5; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @storage
                    # timeDeltaSeconds = sp.as_nat(sp.now - self.data.lastTradeTime) # @storage
                    DUP;        # @storage : @storage
                    GET 3;      # timestamp : @storage
                    NOW;        # @now : timestamp : @storage
                    SUB;        # int : @storage
                    ISNAT;      # option nat : @storage
                    IF_NONE
                      {
                        PUSH int 203; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    SWAP;       # @storage : @some
                    # assert timeDeltaSeconds >= self.data.minTradeDelaySec, Errors.TRADE_TIME # @storage : @some
                    DUP;        # @storage : @storage : @some
                    GET 7;      # nat : @storage : @some
                    DIG 2;      # @some : nat : @storage
                    COMPARE;    # int : @storage
                    GE;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 7; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # youvesUsdt = sp.view( # @storage
                    DUP;        # @storage : @storage
                    GET 17;     # address : @storage
                    PUSH string "USDTUSD"; # string : address : @storage
                    VIEW "get_price_with_timestamp" (pair nat timestamp); # option (pair nat timestamp) : @storage
                    IF_NONE
                      {
                        PUSH int 12; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    # usdtPrice = sp.fst(youvesUsdt) # @some : @storage
                    CAR;        # nat : @storage
                    # assert usdtPrice >= 990000, Errors.USDT_PEG # nat : @storage
                    PUSH nat 990000; # nat : nat : @storage
                    SWAP;       # nat : nat : @storage
                    COMPARE;    # int : @storage
                    GE;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 8; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # youvesSpot = sp.view( # @storage
                    DUP;        # @storage : @storage
                    GET 17;     # address : @storage
                    PUSH string "XTZUSDT"; # string : address : @storage
                    VIEW "get_price_with_timestamp" (pair nat timestamp); # option (pair nat timestamp) : @storage
                    IF_NONE
                      {
                        PUSH int 12; # int : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : @storage
                    # spotPrice = sp.fst(youvesSpot) # @some : @storage
                    DUP;        # @some : @some : @storage
                    CAR;        # nat : @some : @storage
                    # spotAge = utils.seconds_of_timestamp(sp.snd(youvesSpot)) / 1000 # nat : @some : @storage
                    PUSH nat 1000; # nat : nat : @some : @storage
                    LAMBDA
                      timestamp
                      nat
                      {
                        # return abs(timestamp - sp.timestamp(0)) # timestamp
                        PUSH timestamp "1970-01-01T00:00:00Z"; # timestamp : timestamp
                        SWAP;       # timestamp : timestamp
                        SUB;        # int
                        ABS;        # nat
                      }; # lambda timestamp nat : nat : nat : @some : @storage
                    DIG 3;      # @some : lambda timestamp nat : nat : nat : @storage
                    CDR;        # timestamp : lambda timestamp nat : nat : nat : @storage
                    EXEC;       # nat : nat : nat : @storage
                    EDIV;       # option (pair nat nat) : nat : @storage
                    IF_NONE
                      {
                        PUSH int 239; # int : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : @storage
                      }; # nat : nat : @storage
                    # dataAge = utils.seconds_of_timestamp(sp.now) - spotAge # nat : nat : @storage
                    LAMBDA
                      timestamp
                      nat
                      {
                        # return abs(timestamp - sp.timestamp(0)) # timestamp
                        PUSH timestamp "1970-01-01T00:00:00Z"; # timestamp : timestamp
                        SWAP;       # timestamp : timestamp
                        SUB;        # int
                        ABS;        # nat
                      }; # lambda timestamp nat : nat : nat : @storage
                    NOW;        # @now : lambda timestamp nat : nat : nat : @storage
                    EXEC;       # nat : nat : nat : @storage
                    SUB;        # int : nat : @storage
                    # assert sp.as_nat(dataAge) <= self.data.maxDataDelaySec, Errors.STALE_DATA # int : nat : @storage
                    DUP 3;      # @storage : int : nat : @storage
                    GET 5;      # nat : int : nat : @storage
                    SWAP;       # int : nat : nat : @storage
                    ISNAT;      # option nat : nat : nat : @storage
                    IF_NONE
                      {
                        PUSH int 241; # int : nat : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : @storage
                    COMPARE;    # int : nat : @storage
                    LE;         # bool : nat : @storage
                    IF
                      {}
                      {
                        PUSH int 4; # int : nat : @storage
                        FAILWITH;   # FAILED
                      }; # nat : @storage
                    # tokensToTrade = self.data.tradeAmount * Constants.PRECISION # nat : @storage
                    PUSH nat 1000000000000000000; # nat : nat : @storage
                    DUP 3;      # @storage : nat : nat : @storage
                    GET 26;     # nat : nat : nat : @storage
                    MUL;        # nat : nat : @storage
                    # neutralOut = (tokensToTrade / spotPrice) / 1_000_000 # nat : nat : @storage
                    PUSH nat 1000000; # nat : nat : nat : @storage
                    DIG 2;      # nat : nat : nat : @storage
                    DUP 3;      # nat : nat : nat : nat : @storage
                    EDIV;       # option (pair nat nat) : nat : nat : @storage
                    IF_NONE
                      {
                        PUSH int 248; # int : nat : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : nat : @storage
                      }; # nat : nat : nat : @storage
                    EDIV;       # option (pair nat nat) : nat : @storage
                    IF_NONE
                      {
                        PUSH int 248; # int : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : @storage
                      }; # nat : nat : @storage
                    # percent = sp.nat(1000) + self.data.spreadAmount # nat : nat : @storage
                    DUP 3;      # @storage : nat : nat : @storage
                    GET 19;     # nat : nat : nat : @storage
                    PUSH nat 1000; # nat : nat : nat : nat : @storage
                    ADD;        # nat : nat : nat : @storage
                    # requiredOut = ( # nat : nat : nat : @storage
                    PUSH nat 1000; # nat : nat : nat : nat : @storage
                    SWAP;       # nat : nat : nat : nat : @storage
                    DIG 2;      # nat : nat : nat : nat : @storage
                    MUL;        # nat : nat : nat : @storage
                    EDIV;       # option (pair nat nat) : nat : @storage
                    IF_NONE
                      {
                        PUSH int 253; # int : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {
                        CAR;        # nat : nat : @storage
                      }; # nat : nat : @storage
                    # approveHandle = sp.contract( # nat : nat : @storage
                    DUP 3;      # @storage : nat : nat : @storage
                    GET 23;     # address : nat : nat : @storage
                    CONTRACT %approve (pair address nat); # option (contract (pair address nat)) : nat : nat : @storage
                    IF_NONE
                      {
                        PUSH int 15; # int : nat : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : nat : @storage
                    # approveArg = (self.data.quipuswapContractAddress, tokensToTrade) # @some : nat : nat : @storage
                    DUP 3;      # nat : @some : nat : nat : @storage
                    DUP 5;      # @storage : nat : @some : nat : nat : @storage
                    GET 13;     # address : nat : @some : nat : nat : @storage
                    PAIR;       # pair address nat : @some : nat : nat : @storage
                    # sp.transfer(approveArg, sp.mutez(0), approveHandle) # pair address nat : @some : nat : nat : @storage
                    NIL operation; # list operation : pair address nat : @some : nat : nat : @storage
                    DIG 2;      # @some : list operation : pair address nat : nat : nat : @storage
                    PUSH mutez 0; # mutez : @some : list operation : pair address nat : nat : nat : @storage
                    DIG 3;      # pair address nat : mutez : @some : list operation : nat : nat : @storage
                    TRANSFER_TOKENS; # operation : list operation : nat : nat : @storage
                    CONS;       # list operation : nat : nat : @storage
                    # tradeHandle = sp.contract( # list operation : nat : nat : @storage
                    DUP 4;      # @storage : list operation : nat : nat : @storage
                    GET 13;     # address : list operation : nat : nat : @storage
                    CONTRACT %tokenToTezPayment (pair (pair nat nat) address); # option (contract (pair (pair nat nat) address)) : list operation : nat : nat : @storage
                    IF_NONE
                      {
                        PUSH int 13; # int : list operation : nat : nat : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : nat : nat : @storage
                    # tradeArg = ((tokensToTrade, requiredOut), self.data.receiverContractAddress) # @some : list operation : nat : nat : @storage
                    DUP 5;      # @storage : @some : list operation : nat : nat : @storage
                    GET 15;     # address : @some : list operation : nat : nat : @storage
                    DIG 3;      # nat : address : @some : list operation : nat : @storage
                    DIG 4;      # nat : nat : address : @some : list operation : @storage
                    PAIR;       # pair nat nat : address : @some : list operation : @storage
                    PAIR;       # pair (pair nat nat) address : @some : list operation : @storage
                    # sp.transfer(tradeArg, sp.mutez(0), tradeHandle) # pair (pair nat nat) address : @some : list operation : @storage
                    DUG 2;      # @some : list operation : pair (pair nat nat) address : @storage
                    PUSH mutez 0; # mutez : @some : list operation : pair (pair nat nat) address : @storage
                    DIG 3;      # pair (pair nat nat) address : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                    SWAP;       # @storage : list operation
                    # self.data.lastTradeTime = sp.now # @storage : list operation
                    NOW;        # @now : @storage : list operation
                    UPDATE 3;   # @storage : list operation
                    SWAP;       # list operation : @storage
                    # approveHandle = sp.contract( # list operation : @storage
                    DUP 2;      # @storage : list operation : @storage
                    GET 23;     # address : list operation : @storage
                    CONTRACT %approve (pair address nat); # option (contract (pair address nat)) : list operation : @storage
                    IF_NONE
                      {
                        PUSH int 15; # int : list operation : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : list operation : @storage
                    SWAP;       # list operation : @some : @storage
                    # approveArg = (self.data.quipuswapContractAddress, 0) # list operation : @some : @storage
                    PUSH nat 0; # nat : list operation : @some : @storage
                    DUP 4;      # @storage : nat : list operation : @some : @storage
                    GET 13;     # address : nat : list operation : @some : @storage
                    PAIR;       # pair address nat : list operation : @some : @storage
                    SWAP;       # list operation : pair address nat : @some : @storage
                    # sp.transfer(approveArg, sp.mutez(0), approveHandle) # list operation : pair address nat : @some : @storage
                    DIG 2;      # @some : list operation : pair address nat : @storage
                    PUSH mutez 0; # mutez : @some : list operation : pair address nat : @storage
                    DIG 3;      # pair address nat : mutez : @some : list operation : @storage
                    TRANSFER_TOKENS; # operation : list operation : @storage
                    CONS;       # list operation : @storage
                  }
                  {
                    DROP;       # @storage
                    # == unpause ==
                    # assert sp.amount == sp.tez(0) # @storage
                    PUSH mutez 0; # mutez : @storage
                    AMOUNT;     # @amount : mutez : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH string "Assert failure: sp.amount == sp.tez(0)"; # string : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # assert sp.sender == self.data.governorContractAddress, Errors.NOT_GOVERNOR # @storage
                    DUP;        # @storage : @storage
                    CAR;        # address : @storage
                    SENDER;     # @sender : address : @storage
                    COMPARE;    # int : @storage
                    EQ;         # bool : @storage
                    IF
                      {}
                      {
                        PUSH int 1; # int : @storage
                        FAILWITH;   # FAILED
                      }; # @storage
                    # self.data.paused = False # @storage
                    PUSH bool False; # bool : @storage
                    UPDATE 11;  # @storage
                    NIL operation; # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : @storage
      }; # list operation : @storage
    NIL operation; # list operation : list operation : @storage
    SWAP;       # list operation : list operation : @storage
    ITER
      {
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };
